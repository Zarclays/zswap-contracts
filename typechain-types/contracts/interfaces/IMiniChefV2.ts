/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IMiniChefV2 {
  export type PoolInfoStruct = {
    accSushiPerShare: BigNumberish;
    lastRewardTime: BigNumberish;
    allocPoint: BigNumberish;
  };

  export type PoolInfoStructOutput = [
    accSushiPerShare: bigint,
    lastRewardTime: bigint,
    allocPoint: bigint
  ] & { accSushiPerShare: bigint; lastRewardTime: bigint; allocPoint: bigint };
}

export interface IMiniChefV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "deposit"
      | "emergencyWithdraw"
      | "harvest"
      | "poolLength"
      | "updatePool"
      | "userInfo"
      | "withdraw"
      | "withdrawAndHarvest"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndHarvest",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndHarvest",
    data: BytesLike
  ): Result;
}

export interface IMiniChefV2 extends BaseContract {
  connect(runner?: ContractRunner | null): IMiniChefV2;
  waitForDeployment(): Promise<this>;

  interface: IMiniChefV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deposit: TypedContractMethod<
    [pid: BigNumberish, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [pid: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  harvest: TypedContractMethod<
    [pid: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  poolLength: TypedContractMethod<[], [bigint], "view">;

  updatePool: TypedContractMethod<
    [pid: BigNumberish],
    [IMiniChefV2.PoolInfoStructOutput],
    "nonpayable"
  >;

  userInfo: TypedContractMethod<
    [_pid: BigNumberish, _user: AddressLike],
    [[bigint, bigint]],
    "view"
  >;

  withdraw: TypedContractMethod<
    [pid: BigNumberish, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawAndHarvest: TypedContractMethod<
    [pid: BigNumberish, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [pid: BigNumberish, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [pid: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "harvest"
  ): TypedContractMethod<
    [pid: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "poolLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updatePool"
  ): TypedContractMethod<
    [pid: BigNumberish],
    [IMiniChefV2.PoolInfoStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userInfo"
  ): TypedContractMethod<
    [_pid: BigNumberish, _user: AddressLike],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [pid: BigNumberish, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAndHarvest"
  ): TypedContractMethod<
    [pid: BigNumberish, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
