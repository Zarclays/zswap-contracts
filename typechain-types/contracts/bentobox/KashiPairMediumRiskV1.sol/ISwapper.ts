/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ISwapperInterface extends Interface {
  getFunction(nameOrSignature: "swap" | "swapExact"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "swap",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExact",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapExact", data: BytesLike): Result;
}

export interface ISwapper extends BaseContract {
  connect(runner?: ContractRunner | null): ISwapper;
  waitForDeployment(): Promise<this>;

  interface: ISwapperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  swap: TypedContractMethod<
    [
      fromToken: AddressLike,
      toToken: AddressLike,
      recipient: AddressLike,
      shareToMin: BigNumberish,
      shareFrom: BigNumberish
    ],
    [[bigint, bigint] & { extraShare: bigint; shareReturned: bigint }],
    "nonpayable"
  >;

  swapExact: TypedContractMethod<
    [
      fromToken: AddressLike,
      toToken: AddressLike,
      recipient: AddressLike,
      refundTo: AddressLike,
      shareFromSupplied: BigNumberish,
      shareToExact: BigNumberish
    ],
    [[bigint, bigint] & { shareUsed: bigint; shareReturned: bigint }],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [
      fromToken: AddressLike,
      toToken: AddressLike,
      recipient: AddressLike,
      shareToMin: BigNumberish,
      shareFrom: BigNumberish
    ],
    [[bigint, bigint] & { extraShare: bigint; shareReturned: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExact"
  ): TypedContractMethod<
    [
      fromToken: AddressLike,
      toToken: AddressLike,
      recipient: AddressLike,
      refundTo: AddressLike,
      shareFromSupplied: BigNumberish,
      shareToExact: BigNumberish
    ],
    [[bigint, bigint] & { shareUsed: bigint; shareReturned: bigint }],
    "nonpayable"
  >;

  filters: {};
}
