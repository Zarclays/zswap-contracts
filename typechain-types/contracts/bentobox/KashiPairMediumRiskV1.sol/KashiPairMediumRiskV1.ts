/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface KashiPairMediumRiskV1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "accrue"
      | "accrueInfo"
      | "addAsset"
      | "addCollateral"
      | "allowance"
      | "approve"
      | "asset"
      | "balanceOf"
      | "bentoBox"
      | "borrow"
      | "claimOwnership"
      | "collateral"
      | "cook"
      | "decimals"
      | "exchangeRate"
      | "feeTo"
      | "init"
      | "liquidate"
      | "masterContract"
      | "name"
      | "nonces"
      | "oracle"
      | "oracleData"
      | "owner"
      | "pendingOwner"
      | "permit"
      | "removeAsset"
      | "removeCollateral"
      | "repay"
      | "setFeeTo"
      | "setSwapper"
      | "swappers"
      | "symbol"
      | "totalAsset"
      | "totalBorrow"
      | "totalCollateralShare"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "updateExchangeRate"
      | "userBorrowPart"
      | "userCollateralShare"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "LogAccrue"
      | "LogAddAsset"
      | "LogAddCollateral"
      | "LogBorrow"
      | "LogExchangeRate"
      | "LogFeeTo"
      | "LogRemoveAsset"
      | "LogRemoveCollateral"
      | "LogRepay"
      | "LogWithdrawFees"
      | "OwnershipTransferred"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "accrue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accrueInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAsset",
    values: [AddressLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [AddressLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "bentoBox", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cook",
    values: [BigNumberish[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [AddressLike[], BigNumberish[], AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "masterContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oracleData",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAsset",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [AddressLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapper",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "swappers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollateralShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userBorrowPart",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userCollateralShare",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accrue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "accrueInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bentoBox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracleData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSwapper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swappers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollateralShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBorrowPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCollateralShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _spender: AddressLike,
    _value: BigNumberish
  ];
  export type OutputTuple = [_owner: string, _spender: string, _value: bigint];
  export interface OutputObject {
    _owner: string;
    _spender: string;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogAccrueEvent {
  export type InputTuple = [
    accruedAmount: BigNumberish,
    feeFraction: BigNumberish,
    rate: BigNumberish,
    utilization: BigNumberish
  ];
  export type OutputTuple = [
    accruedAmount: bigint,
    feeFraction: bigint,
    rate: bigint,
    utilization: bigint
  ];
  export interface OutputObject {
    accruedAmount: bigint;
    feeFraction: bigint;
    rate: bigint;
    utilization: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogAddAssetEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    share: BigNumberish,
    fraction: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    share: bigint,
    fraction: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    share: bigint;
    fraction: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogAddCollateralEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    share: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, share: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    share: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogBorrowEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    feeAmount: BigNumberish,
    part: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    amount: bigint,
    feeAmount: bigint,
    part: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
    feeAmount: bigint;
    part: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogExchangeRateEvent {
  export type InputTuple = [rate: BigNumberish];
  export type OutputTuple = [rate: bigint];
  export interface OutputObject {
    rate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogFeeToEvent {
  export type InputTuple = [newFeeTo: AddressLike];
  export type OutputTuple = [newFeeTo: string];
  export interface OutputObject {
    newFeeTo: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogRemoveAssetEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    share: BigNumberish,
    fraction: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    share: bigint,
    fraction: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    share: bigint;
    fraction: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogRemoveCollateralEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    share: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, share: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    share: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogRepayEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    part: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    amount: bigint,
    part: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
    part: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogWithdrawFeesEvent {
  export type InputTuple = [
    feeTo: AddressLike,
    feesEarnedFraction: BigNumberish
  ];
  export type OutputTuple = [feeTo: string, feesEarnedFraction: bigint];
  export interface OutputObject {
    feeTo: string;
    feesEarnedFraction: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    _from: AddressLike,
    _to: AddressLike,
    _value: BigNumberish
  ];
  export type OutputTuple = [_from: string, _to: string, _value: bigint];
  export interface OutputObject {
    _from: string;
    _to: string;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface KashiPairMediumRiskV1 extends BaseContract {
  connect(runner?: ContractRunner | null): KashiPairMediumRiskV1;
  waitForDeployment(): Promise<this>;

  interface: KashiPairMediumRiskV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  accrue: TypedContractMethod<[], [void], "nonpayable">;

  accrueInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        interestPerSecond: bigint;
        lastAccrued: bigint;
        feesEarnedFraction: bigint;
      }
    ],
    "view"
  >;

  addAsset: TypedContractMethod<
    [to: AddressLike, skim: boolean, share: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  addCollateral: TypedContractMethod<
    [to: AddressLike, skim: boolean, share: BigNumberish],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  asset: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  bentoBox: TypedContractMethod<[], [string], "view">;

  borrow: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [[bigint, bigint] & { part: bigint; share: bigint }],
    "nonpayable"
  >;

  claimOwnership: TypedContractMethod<[], [void], "nonpayable">;

  collateral: TypedContractMethod<[], [string], "view">;

  cook: TypedContractMethod<
    [actions: BigNumberish[], values: BigNumberish[], datas: BytesLike[]],
    [[bigint, bigint] & { value1: bigint; value2: bigint }],
    "payable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  exchangeRate: TypedContractMethod<[], [bigint], "view">;

  feeTo: TypedContractMethod<[], [string], "view">;

  init: TypedContractMethod<[data: BytesLike], [void], "payable">;

  liquidate: TypedContractMethod<
    [
      users: AddressLike[],
      maxBorrowParts: BigNumberish[],
      to: AddressLike,
      swapper: AddressLike,
      open: boolean
    ],
    [void],
    "nonpayable"
  >;

  masterContract: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  oracle: TypedContractMethod<[], [string], "view">;

  oracleData: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  permit: TypedContractMethod<
    [
      owner_: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  removeAsset: TypedContractMethod<
    [to: AddressLike, fraction: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  removeCollateral: TypedContractMethod<
    [to: AddressLike, share: BigNumberish],
    [void],
    "nonpayable"
  >;

  repay: TypedContractMethod<
    [to: AddressLike, skim: boolean, part: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  setFeeTo: TypedContractMethod<[newFeeTo: AddressLike], [void], "nonpayable">;

  setSwapper: TypedContractMethod<
    [swapper: AddressLike, enable: boolean],
    [void],
    "nonpayable"
  >;

  swappers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  totalAsset: TypedContractMethod<
    [],
    [[bigint, bigint] & { elastic: bigint; base: bigint }],
    "view"
  >;

  totalBorrow: TypedContractMethod<
    [],
    [[bigint, bigint] & { elastic: bigint; base: bigint }],
    "view"
  >;

  totalCollateralShare: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike, direct: boolean, renounce: boolean],
    [void],
    "nonpayable"
  >;

  updateExchangeRate: TypedContractMethod<
    [],
    [[boolean, bigint] & { updated: boolean; rate: bigint }],
    "nonpayable"
  >;

  userBorrowPart: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userCollateralShare: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accrue"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "accrueInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        interestPerSecond: bigint;
        lastAccrued: bigint;
        feesEarnedFraction: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addAsset"
  ): TypedContractMethod<
    [to: AddressLike, skim: boolean, share: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addCollateral"
  ): TypedContractMethod<
    [to: AddressLike, skim: boolean, share: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "asset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bentoBox"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [[bigint, bigint] & { part: bigint; share: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collateral"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cook"
  ): TypedContractMethod<
    [actions: BigNumberish[], values: BigNumberish[], datas: BytesLike[]],
    [[bigint, bigint] & { value1: bigint; value2: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "exchangeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeTo"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<[data: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "liquidate"
  ): TypedContractMethod<
    [
      users: AddressLike[],
      maxBorrowParts: BigNumberish[],
      to: AddressLike,
      swapper: AddressLike,
      open: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "masterContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "oracleData"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      owner_: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAsset"
  ): TypedContractMethod<
    [to: AddressLike, fraction: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeCollateral"
  ): TypedContractMethod<
    [to: AddressLike, share: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<
    [to: AddressLike, skim: boolean, part: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeTo"
  ): TypedContractMethod<[newFeeTo: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSwapper"
  ): TypedContractMethod<
    [swapper: AddressLike, enable: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swappers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalAsset"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { elastic: bigint; base: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalBorrow"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { elastic: bigint; base: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalCollateralShare"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<
    [newOwner: AddressLike, direct: boolean, renounce: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateExchangeRate"
  ): TypedContractMethod<
    [],
    [[boolean, bigint] & { updated: boolean; rate: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userBorrowPart"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userCollateralShare"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "LogAccrue"
  ): TypedContractEvent<
    LogAccrueEvent.InputTuple,
    LogAccrueEvent.OutputTuple,
    LogAccrueEvent.OutputObject
  >;
  getEvent(
    key: "LogAddAsset"
  ): TypedContractEvent<
    LogAddAssetEvent.InputTuple,
    LogAddAssetEvent.OutputTuple,
    LogAddAssetEvent.OutputObject
  >;
  getEvent(
    key: "LogAddCollateral"
  ): TypedContractEvent<
    LogAddCollateralEvent.InputTuple,
    LogAddCollateralEvent.OutputTuple,
    LogAddCollateralEvent.OutputObject
  >;
  getEvent(
    key: "LogBorrow"
  ): TypedContractEvent<
    LogBorrowEvent.InputTuple,
    LogBorrowEvent.OutputTuple,
    LogBorrowEvent.OutputObject
  >;
  getEvent(
    key: "LogExchangeRate"
  ): TypedContractEvent<
    LogExchangeRateEvent.InputTuple,
    LogExchangeRateEvent.OutputTuple,
    LogExchangeRateEvent.OutputObject
  >;
  getEvent(
    key: "LogFeeTo"
  ): TypedContractEvent<
    LogFeeToEvent.InputTuple,
    LogFeeToEvent.OutputTuple,
    LogFeeToEvent.OutputObject
  >;
  getEvent(
    key: "LogRemoveAsset"
  ): TypedContractEvent<
    LogRemoveAssetEvent.InputTuple,
    LogRemoveAssetEvent.OutputTuple,
    LogRemoveAssetEvent.OutputObject
  >;
  getEvent(
    key: "LogRemoveCollateral"
  ): TypedContractEvent<
    LogRemoveCollateralEvent.InputTuple,
    LogRemoveCollateralEvent.OutputTuple,
    LogRemoveCollateralEvent.OutputObject
  >;
  getEvent(
    key: "LogRepay"
  ): TypedContractEvent<
    LogRepayEvent.InputTuple,
    LogRepayEvent.OutputTuple,
    LogRepayEvent.OutputObject
  >;
  getEvent(
    key: "LogWithdrawFees"
  ): TypedContractEvent<
    LogWithdrawFeesEvent.InputTuple,
    LogWithdrawFeesEvent.OutputTuple,
    LogWithdrawFeesEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "LogAccrue(uint256,uint256,uint64,uint256)": TypedContractEvent<
      LogAccrueEvent.InputTuple,
      LogAccrueEvent.OutputTuple,
      LogAccrueEvent.OutputObject
    >;
    LogAccrue: TypedContractEvent<
      LogAccrueEvent.InputTuple,
      LogAccrueEvent.OutputTuple,
      LogAccrueEvent.OutputObject
    >;

    "LogAddAsset(address,address,uint256,uint256)": TypedContractEvent<
      LogAddAssetEvent.InputTuple,
      LogAddAssetEvent.OutputTuple,
      LogAddAssetEvent.OutputObject
    >;
    LogAddAsset: TypedContractEvent<
      LogAddAssetEvent.InputTuple,
      LogAddAssetEvent.OutputTuple,
      LogAddAssetEvent.OutputObject
    >;

    "LogAddCollateral(address,address,uint256)": TypedContractEvent<
      LogAddCollateralEvent.InputTuple,
      LogAddCollateralEvent.OutputTuple,
      LogAddCollateralEvent.OutputObject
    >;
    LogAddCollateral: TypedContractEvent<
      LogAddCollateralEvent.InputTuple,
      LogAddCollateralEvent.OutputTuple,
      LogAddCollateralEvent.OutputObject
    >;

    "LogBorrow(address,address,uint256,uint256,uint256)": TypedContractEvent<
      LogBorrowEvent.InputTuple,
      LogBorrowEvent.OutputTuple,
      LogBorrowEvent.OutputObject
    >;
    LogBorrow: TypedContractEvent<
      LogBorrowEvent.InputTuple,
      LogBorrowEvent.OutputTuple,
      LogBorrowEvent.OutputObject
    >;

    "LogExchangeRate(uint256)": TypedContractEvent<
      LogExchangeRateEvent.InputTuple,
      LogExchangeRateEvent.OutputTuple,
      LogExchangeRateEvent.OutputObject
    >;
    LogExchangeRate: TypedContractEvent<
      LogExchangeRateEvent.InputTuple,
      LogExchangeRateEvent.OutputTuple,
      LogExchangeRateEvent.OutputObject
    >;

    "LogFeeTo(address)": TypedContractEvent<
      LogFeeToEvent.InputTuple,
      LogFeeToEvent.OutputTuple,
      LogFeeToEvent.OutputObject
    >;
    LogFeeTo: TypedContractEvent<
      LogFeeToEvent.InputTuple,
      LogFeeToEvent.OutputTuple,
      LogFeeToEvent.OutputObject
    >;

    "LogRemoveAsset(address,address,uint256,uint256)": TypedContractEvent<
      LogRemoveAssetEvent.InputTuple,
      LogRemoveAssetEvent.OutputTuple,
      LogRemoveAssetEvent.OutputObject
    >;
    LogRemoveAsset: TypedContractEvent<
      LogRemoveAssetEvent.InputTuple,
      LogRemoveAssetEvent.OutputTuple,
      LogRemoveAssetEvent.OutputObject
    >;

    "LogRemoveCollateral(address,address,uint256)": TypedContractEvent<
      LogRemoveCollateralEvent.InputTuple,
      LogRemoveCollateralEvent.OutputTuple,
      LogRemoveCollateralEvent.OutputObject
    >;
    LogRemoveCollateral: TypedContractEvent<
      LogRemoveCollateralEvent.InputTuple,
      LogRemoveCollateralEvent.OutputTuple,
      LogRemoveCollateralEvent.OutputObject
    >;

    "LogRepay(address,address,uint256,uint256)": TypedContractEvent<
      LogRepayEvent.InputTuple,
      LogRepayEvent.OutputTuple,
      LogRepayEvent.OutputObject
    >;
    LogRepay: TypedContractEvent<
      LogRepayEvent.InputTuple,
      LogRepayEvent.OutputTuple,
      LogRepayEvent.OutputObject
    >;

    "LogWithdrawFees(address,uint256)": TypedContractEvent<
      LogWithdrawFeesEvent.InputTuple,
      LogWithdrawFeesEvent.OutputTuple,
      LogWithdrawFeesEvent.OutputObject
    >;
    LogWithdrawFees: TypedContractEvent<
      LogWithdrawFeesEvent.InputTuple,
      LogWithdrawFeesEvent.OutputTuple,
      LogWithdrawFeesEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
