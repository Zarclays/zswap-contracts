/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type RebaseStruct = { elastic: BigNumberish; base: BigNumberish };

export type RebaseStructOutput = [elastic: bigint, base: bigint] & {
  elastic: bigint;
  base: bigint;
};

export interface IBentoBoxV1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "balanceOf"
      | "batch"
      | "batchFlashLoan"
      | "claimOwnership"
      | "deploy"
      | "deposit"
      | "flashLoan"
      | "harvest"
      | "masterContractApproved"
      | "masterContractOf"
      | "nonces"
      | "owner"
      | "pendingOwner"
      | "pendingStrategy"
      | "permitToken"
      | "registerProtocol"
      | "setMasterContractApproval"
      | "setStrategy"
      | "setStrategyTargetPercentage"
      | "strategy"
      | "strategyData"
      | "toAmount"
      | "toShare"
      | "totals"
      | "transfer"
      | "transferMultiple"
      | "transferOwnership"
      | "whitelistMasterContract"
      | "whitelistedMasterContracts"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LogDeploy"
      | "LogDeposit"
      | "LogFlashLoan"
      | "LogRegisterProtocol"
      | "LogSetMasterContractApproval"
      | "LogStrategyDivest"
      | "LogStrategyInvest"
      | "LogStrategyLoss"
      | "LogStrategyProfit"
      | "LogStrategyQueued"
      | "LogStrategySet"
      | "LogStrategyTargetPercentage"
      | "LogTransfer"
      | "LogWhiteListMasterContract"
      | "LogWithdraw"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batch",
    values: [BytesLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "batchFlashLoan",
    values: [
      AddressLike,
      AddressLike[],
      AddressLike[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [AddressLike, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [AddressLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "masterContractApproved",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "masterContractOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingStrategy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "permitToken",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProtocol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMasterContractApproval",
    values: [
      AddressLike,
      AddressLike,
      boolean,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategy",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyTargetPercentage",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toAmount",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "toShare",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "totals", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferMultiple",
    values: [AddressLike, AddressLike, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistMasterContract",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedMasterContracts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterContractApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "masterContractOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMasterContractApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyTargetPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "strategyData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toShare", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistMasterContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedMasterContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace LogDeployEvent {
  export type InputTuple = [
    masterContract: AddressLike,
    data: BytesLike,
    cloneAddress: AddressLike
  ];
  export type OutputTuple = [
    masterContract: string,
    data: string,
    cloneAddress: string
  ];
  export interface OutputObject {
    masterContract: string;
    data: string;
    cloneAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogDepositEvent {
  export type InputTuple = [
    token: AddressLike,
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    share: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    from: string,
    to: string,
    amount: bigint,
    share: bigint
  ];
  export interface OutputObject {
    token: string;
    from: string;
    to: string;
    amount: bigint;
    share: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogFlashLoanEvent {
  export type InputTuple = [
    borrower: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    feeAmount: BigNumberish,
    receiver: AddressLike
  ];
  export type OutputTuple = [
    borrower: string,
    token: string,
    amount: bigint,
    feeAmount: bigint,
    receiver: string
  ];
  export interface OutputObject {
    borrower: string;
    token: string;
    amount: bigint;
    feeAmount: bigint;
    receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogRegisterProtocolEvent {
  export type InputTuple = [protocol: AddressLike];
  export type OutputTuple = [protocol: string];
  export interface OutputObject {
    protocol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogSetMasterContractApprovalEvent {
  export type InputTuple = [
    masterContract: AddressLike,
    user: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    masterContract: string,
    user: string,
    approved: boolean
  ];
  export interface OutputObject {
    masterContract: string;
    user: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogStrategyDivestEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogStrategyInvestEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogStrategyLossEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogStrategyProfitEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogStrategyQueuedEvent {
  export type InputTuple = [token: AddressLike, strategy: AddressLike];
  export type OutputTuple = [token: string, strategy: string];
  export interface OutputObject {
    token: string;
    strategy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogStrategySetEvent {
  export type InputTuple = [token: AddressLike, strategy: AddressLike];
  export type OutputTuple = [token: string, strategy: string];
  export interface OutputObject {
    token: string;
    strategy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogStrategyTargetPercentageEvent {
  export type InputTuple = [token: AddressLike, targetPercentage: BigNumberish];
  export type OutputTuple = [token: string, targetPercentage: bigint];
  export interface OutputObject {
    token: string;
    targetPercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogTransferEvent {
  export type InputTuple = [
    token: AddressLike,
    from: AddressLike,
    to: AddressLike,
    share: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    from: string,
    to: string,
    share: bigint
  ];
  export interface OutputObject {
    token: string;
    from: string;
    to: string;
    share: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogWhiteListMasterContractEvent {
  export type InputTuple = [masterContract: AddressLike, approved: boolean];
  export type OutputTuple = [masterContract: string, approved: boolean];
  export interface OutputObject {
    masterContract: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogWithdrawEvent {
  export type InputTuple = [
    token: AddressLike,
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    share: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    from: string,
    to: string,
    amount: bigint,
    share: bigint
  ];
  export interface OutputObject {
    token: string;
    from: string;
    to: string;
    amount: bigint;
    share: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IBentoBoxV1 extends BaseContract {
  connect(runner?: ContractRunner | null): IBentoBoxV1;
  waitForDeployment(): Promise<this>;

  interface: IBentoBoxV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balanceOf: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  batch: TypedContractMethod<
    [calls: BytesLike[], revertOnFail: boolean],
    [[boolean[], string[]] & { successes: boolean[]; results: string[] }],
    "payable"
  >;

  batchFlashLoan: TypedContractMethod<
    [
      borrower: AddressLike,
      receivers: AddressLike[],
      tokens: AddressLike[],
      amounts: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  claimOwnership: TypedContractMethod<[], [void], "nonpayable">;

  deploy: TypedContractMethod<
    [masterContract: AddressLike, data: BytesLike, useCreate2: boolean],
    [void],
    "payable"
  >;

  deposit: TypedContractMethod<
    [
      token_: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      share: BigNumberish
    ],
    [[bigint, bigint] & { amountOut: bigint; shareOut: bigint }],
    "payable"
  >;

  flashLoan: TypedContractMethod<
    [
      borrower: AddressLike,
      receiver: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  harvest: TypedContractMethod<
    [token: AddressLike, balance: boolean, maxChangeAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  masterContractApproved: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  masterContractOf: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  nonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  pendingStrategy: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  permitToken: TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  registerProtocol: TypedContractMethod<[], [void], "nonpayable">;

  setMasterContractApproval: TypedContractMethod<
    [
      user: AddressLike,
      masterContract: AddressLike,
      approved: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setStrategy: TypedContractMethod<
    [token: AddressLike, newStrategy: AddressLike],
    [void],
    "nonpayable"
  >;

  setStrategyTargetPercentage: TypedContractMethod<
    [token: AddressLike, targetPercentage_: BigNumberish],
    [void],
    "nonpayable"
  >;

  strategy: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  strategyData: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        strategyStartDate: bigint;
        targetPercentage: bigint;
        balance: bigint;
      }
    ],
    "view"
  >;

  toAmount: TypedContractMethod<
    [token: AddressLike, share: BigNumberish, roundUp: boolean],
    [bigint],
    "view"
  >;

  toShare: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, roundUp: boolean],
    [bigint],
    "view"
  >;

  totals: TypedContractMethod<
    [arg0: AddressLike],
    [RebaseStructOutput],
    "view"
  >;

  transfer: TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      share: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferMultiple: TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      tos: AddressLike[],
      shares: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike, direct: boolean, renounce: boolean],
    [void],
    "nonpayable"
  >;

  whitelistMasterContract: TypedContractMethod<
    [masterContract: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  whitelistedMasterContracts: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  withdraw: TypedContractMethod<
    [
      token_: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      share: BigNumberish
    ],
    [[bigint, bigint] & { amountOut: bigint; shareOut: bigint }],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "batch"
  ): TypedContractMethod<
    [calls: BytesLike[], revertOnFail: boolean],
    [[boolean[], string[]] & { successes: boolean[]; results: string[] }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "batchFlashLoan"
  ): TypedContractMethod<
    [
      borrower: AddressLike,
      receivers: AddressLike[],
      tokens: AddressLike[],
      amounts: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deploy"
  ): TypedContractMethod<
    [masterContract: AddressLike, data: BytesLike, useCreate2: boolean],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      token_: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      share: BigNumberish
    ],
    [[bigint, bigint] & { amountOut: bigint; shareOut: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "flashLoan"
  ): TypedContractMethod<
    [
      borrower: AddressLike,
      receiver: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "harvest"
  ): TypedContractMethod<
    [token: AddressLike, balance: boolean, maxChangeAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "masterContractApproved"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "masterContractOf"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingStrategy"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "permitToken"
  ): TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerProtocol"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMasterContractApproval"
  ): TypedContractMethod<
    [
      user: AddressLike,
      masterContract: AddressLike,
      approved: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStrategy"
  ): TypedContractMethod<
    [token: AddressLike, newStrategy: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStrategyTargetPercentage"
  ): TypedContractMethod<
    [token: AddressLike, targetPercentage_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "strategy"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "strategyData"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        strategyStartDate: bigint;
        targetPercentage: bigint;
        balance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "toAmount"
  ): TypedContractMethod<
    [token: AddressLike, share: BigNumberish, roundUp: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "toShare"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, roundUp: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "totals"
  ): TypedContractMethod<[arg0: AddressLike], [RebaseStructOutput], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      share: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferMultiple"
  ): TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      tos: AddressLike[],
      shares: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<
    [newOwner: AddressLike, direct: boolean, renounce: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelistMasterContract"
  ): TypedContractMethod<
    [masterContract: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelistedMasterContracts"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      token_: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      share: BigNumberish
    ],
    [[bigint, bigint] & { amountOut: bigint; shareOut: bigint }],
    "nonpayable"
  >;

  getEvent(
    key: "LogDeploy"
  ): TypedContractEvent<
    LogDeployEvent.InputTuple,
    LogDeployEvent.OutputTuple,
    LogDeployEvent.OutputObject
  >;
  getEvent(
    key: "LogDeposit"
  ): TypedContractEvent<
    LogDepositEvent.InputTuple,
    LogDepositEvent.OutputTuple,
    LogDepositEvent.OutputObject
  >;
  getEvent(
    key: "LogFlashLoan"
  ): TypedContractEvent<
    LogFlashLoanEvent.InputTuple,
    LogFlashLoanEvent.OutputTuple,
    LogFlashLoanEvent.OutputObject
  >;
  getEvent(
    key: "LogRegisterProtocol"
  ): TypedContractEvent<
    LogRegisterProtocolEvent.InputTuple,
    LogRegisterProtocolEvent.OutputTuple,
    LogRegisterProtocolEvent.OutputObject
  >;
  getEvent(
    key: "LogSetMasterContractApproval"
  ): TypedContractEvent<
    LogSetMasterContractApprovalEvent.InputTuple,
    LogSetMasterContractApprovalEvent.OutputTuple,
    LogSetMasterContractApprovalEvent.OutputObject
  >;
  getEvent(
    key: "LogStrategyDivest"
  ): TypedContractEvent<
    LogStrategyDivestEvent.InputTuple,
    LogStrategyDivestEvent.OutputTuple,
    LogStrategyDivestEvent.OutputObject
  >;
  getEvent(
    key: "LogStrategyInvest"
  ): TypedContractEvent<
    LogStrategyInvestEvent.InputTuple,
    LogStrategyInvestEvent.OutputTuple,
    LogStrategyInvestEvent.OutputObject
  >;
  getEvent(
    key: "LogStrategyLoss"
  ): TypedContractEvent<
    LogStrategyLossEvent.InputTuple,
    LogStrategyLossEvent.OutputTuple,
    LogStrategyLossEvent.OutputObject
  >;
  getEvent(
    key: "LogStrategyProfit"
  ): TypedContractEvent<
    LogStrategyProfitEvent.InputTuple,
    LogStrategyProfitEvent.OutputTuple,
    LogStrategyProfitEvent.OutputObject
  >;
  getEvent(
    key: "LogStrategyQueued"
  ): TypedContractEvent<
    LogStrategyQueuedEvent.InputTuple,
    LogStrategyQueuedEvent.OutputTuple,
    LogStrategyQueuedEvent.OutputObject
  >;
  getEvent(
    key: "LogStrategySet"
  ): TypedContractEvent<
    LogStrategySetEvent.InputTuple,
    LogStrategySetEvent.OutputTuple,
    LogStrategySetEvent.OutputObject
  >;
  getEvent(
    key: "LogStrategyTargetPercentage"
  ): TypedContractEvent<
    LogStrategyTargetPercentageEvent.InputTuple,
    LogStrategyTargetPercentageEvent.OutputTuple,
    LogStrategyTargetPercentageEvent.OutputObject
  >;
  getEvent(
    key: "LogTransfer"
  ): TypedContractEvent<
    LogTransferEvent.InputTuple,
    LogTransferEvent.OutputTuple,
    LogTransferEvent.OutputObject
  >;
  getEvent(
    key: "LogWhiteListMasterContract"
  ): TypedContractEvent<
    LogWhiteListMasterContractEvent.InputTuple,
    LogWhiteListMasterContractEvent.OutputTuple,
    LogWhiteListMasterContractEvent.OutputObject
  >;
  getEvent(
    key: "LogWithdraw"
  ): TypedContractEvent<
    LogWithdrawEvent.InputTuple,
    LogWithdrawEvent.OutputTuple,
    LogWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "LogDeploy(address,bytes,address)": TypedContractEvent<
      LogDeployEvent.InputTuple,
      LogDeployEvent.OutputTuple,
      LogDeployEvent.OutputObject
    >;
    LogDeploy: TypedContractEvent<
      LogDeployEvent.InputTuple,
      LogDeployEvent.OutputTuple,
      LogDeployEvent.OutputObject
    >;

    "LogDeposit(address,address,address,uint256,uint256)": TypedContractEvent<
      LogDepositEvent.InputTuple,
      LogDepositEvent.OutputTuple,
      LogDepositEvent.OutputObject
    >;
    LogDeposit: TypedContractEvent<
      LogDepositEvent.InputTuple,
      LogDepositEvent.OutputTuple,
      LogDepositEvent.OutputObject
    >;

    "LogFlashLoan(address,address,uint256,uint256,address)": TypedContractEvent<
      LogFlashLoanEvent.InputTuple,
      LogFlashLoanEvent.OutputTuple,
      LogFlashLoanEvent.OutputObject
    >;
    LogFlashLoan: TypedContractEvent<
      LogFlashLoanEvent.InputTuple,
      LogFlashLoanEvent.OutputTuple,
      LogFlashLoanEvent.OutputObject
    >;

    "LogRegisterProtocol(address)": TypedContractEvent<
      LogRegisterProtocolEvent.InputTuple,
      LogRegisterProtocolEvent.OutputTuple,
      LogRegisterProtocolEvent.OutputObject
    >;
    LogRegisterProtocol: TypedContractEvent<
      LogRegisterProtocolEvent.InputTuple,
      LogRegisterProtocolEvent.OutputTuple,
      LogRegisterProtocolEvent.OutputObject
    >;

    "LogSetMasterContractApproval(address,address,bool)": TypedContractEvent<
      LogSetMasterContractApprovalEvent.InputTuple,
      LogSetMasterContractApprovalEvent.OutputTuple,
      LogSetMasterContractApprovalEvent.OutputObject
    >;
    LogSetMasterContractApproval: TypedContractEvent<
      LogSetMasterContractApprovalEvent.InputTuple,
      LogSetMasterContractApprovalEvent.OutputTuple,
      LogSetMasterContractApprovalEvent.OutputObject
    >;

    "LogStrategyDivest(address,uint256)": TypedContractEvent<
      LogStrategyDivestEvent.InputTuple,
      LogStrategyDivestEvent.OutputTuple,
      LogStrategyDivestEvent.OutputObject
    >;
    LogStrategyDivest: TypedContractEvent<
      LogStrategyDivestEvent.InputTuple,
      LogStrategyDivestEvent.OutputTuple,
      LogStrategyDivestEvent.OutputObject
    >;

    "LogStrategyInvest(address,uint256)": TypedContractEvent<
      LogStrategyInvestEvent.InputTuple,
      LogStrategyInvestEvent.OutputTuple,
      LogStrategyInvestEvent.OutputObject
    >;
    LogStrategyInvest: TypedContractEvent<
      LogStrategyInvestEvent.InputTuple,
      LogStrategyInvestEvent.OutputTuple,
      LogStrategyInvestEvent.OutputObject
    >;

    "LogStrategyLoss(address,uint256)": TypedContractEvent<
      LogStrategyLossEvent.InputTuple,
      LogStrategyLossEvent.OutputTuple,
      LogStrategyLossEvent.OutputObject
    >;
    LogStrategyLoss: TypedContractEvent<
      LogStrategyLossEvent.InputTuple,
      LogStrategyLossEvent.OutputTuple,
      LogStrategyLossEvent.OutputObject
    >;

    "LogStrategyProfit(address,uint256)": TypedContractEvent<
      LogStrategyProfitEvent.InputTuple,
      LogStrategyProfitEvent.OutputTuple,
      LogStrategyProfitEvent.OutputObject
    >;
    LogStrategyProfit: TypedContractEvent<
      LogStrategyProfitEvent.InputTuple,
      LogStrategyProfitEvent.OutputTuple,
      LogStrategyProfitEvent.OutputObject
    >;

    "LogStrategyQueued(address,address)": TypedContractEvent<
      LogStrategyQueuedEvent.InputTuple,
      LogStrategyQueuedEvent.OutputTuple,
      LogStrategyQueuedEvent.OutputObject
    >;
    LogStrategyQueued: TypedContractEvent<
      LogStrategyQueuedEvent.InputTuple,
      LogStrategyQueuedEvent.OutputTuple,
      LogStrategyQueuedEvent.OutputObject
    >;

    "LogStrategySet(address,address)": TypedContractEvent<
      LogStrategySetEvent.InputTuple,
      LogStrategySetEvent.OutputTuple,
      LogStrategySetEvent.OutputObject
    >;
    LogStrategySet: TypedContractEvent<
      LogStrategySetEvent.InputTuple,
      LogStrategySetEvent.OutputTuple,
      LogStrategySetEvent.OutputObject
    >;

    "LogStrategyTargetPercentage(address,uint256)": TypedContractEvent<
      LogStrategyTargetPercentageEvent.InputTuple,
      LogStrategyTargetPercentageEvent.OutputTuple,
      LogStrategyTargetPercentageEvent.OutputObject
    >;
    LogStrategyTargetPercentage: TypedContractEvent<
      LogStrategyTargetPercentageEvent.InputTuple,
      LogStrategyTargetPercentageEvent.OutputTuple,
      LogStrategyTargetPercentageEvent.OutputObject
    >;

    "LogTransfer(address,address,address,uint256)": TypedContractEvent<
      LogTransferEvent.InputTuple,
      LogTransferEvent.OutputTuple,
      LogTransferEvent.OutputObject
    >;
    LogTransfer: TypedContractEvent<
      LogTransferEvent.InputTuple,
      LogTransferEvent.OutputTuple,
      LogTransferEvent.OutputObject
    >;

    "LogWhiteListMasterContract(address,bool)": TypedContractEvent<
      LogWhiteListMasterContractEvent.InputTuple,
      LogWhiteListMasterContractEvent.OutputTuple,
      LogWhiteListMasterContractEvent.OutputObject
    >;
    LogWhiteListMasterContract: TypedContractEvent<
      LogWhiteListMasterContractEvent.InputTuple,
      LogWhiteListMasterContractEvent.OutputTuple,
      LogWhiteListMasterContractEvent.OutputObject
    >;

    "LogWithdraw(address,address,address,uint256,uint256)": TypedContractEvent<
      LogWithdrawEvent.InputTuple,
      LogWithdrawEvent.OutputTuple,
      LogWithdrawEvent.OutputObject
    >;
    LogWithdraw: TypedContractEvent<
      LogWithdrawEvent.InputTuple,
      LogWithdrawEvent.OutputTuple,
      LogWithdrawEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
