/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface MasterContractManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "claimOwnership"
      | "deploy"
      | "masterContractApproved"
      | "masterContractOf"
      | "nonces"
      | "owner"
      | "pendingOwner"
      | "registerProtocol"
      | "setMasterContractApproval"
      | "transferOwnership"
      | "whitelistMasterContract"
      | "whitelistedMasterContracts"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LogDeploy"
      | "LogRegisterProtocol"
      | "LogSetMasterContractApproval"
      | "LogWhiteListMasterContract"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [AddressLike, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "masterContractApproved",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "masterContractOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerProtocol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMasterContractApproval",
    values: [
      AddressLike,
      AddressLike,
      boolean,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistMasterContract",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedMasterContracts",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterContractApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "masterContractOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMasterContractApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistMasterContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedMasterContracts",
    data: BytesLike
  ): Result;
}

export namespace LogDeployEvent {
  export type InputTuple = [
    masterContract: AddressLike,
    data: BytesLike,
    cloneAddress: AddressLike
  ];
  export type OutputTuple = [
    masterContract: string,
    data: string,
    cloneAddress: string
  ];
  export interface OutputObject {
    masterContract: string;
    data: string;
    cloneAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogRegisterProtocolEvent {
  export type InputTuple = [protocol: AddressLike];
  export type OutputTuple = [protocol: string];
  export interface OutputObject {
    protocol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogSetMasterContractApprovalEvent {
  export type InputTuple = [
    masterContract: AddressLike,
    user: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    masterContract: string,
    user: string,
    approved: boolean
  ];
  export interface OutputObject {
    masterContract: string;
    user: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogWhiteListMasterContractEvent {
  export type InputTuple = [masterContract: AddressLike, approved: boolean];
  export type OutputTuple = [masterContract: string, approved: boolean];
  export interface OutputObject {
    masterContract: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MasterContractManager extends BaseContract {
  connect(runner?: ContractRunner | null): MasterContractManager;
  waitForDeployment(): Promise<this>;

  interface: MasterContractManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  claimOwnership: TypedContractMethod<[], [void], "nonpayable">;

  deploy: TypedContractMethod<
    [masterContract: AddressLike, data: BytesLike, useCreate2: boolean],
    [string],
    "payable"
  >;

  masterContractApproved: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  masterContractOf: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  nonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  registerProtocol: TypedContractMethod<[], [void], "nonpayable">;

  setMasterContractApproval: TypedContractMethod<
    [
      user: AddressLike,
      masterContract: AddressLike,
      approved: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike, direct: boolean, renounce: boolean],
    [void],
    "nonpayable"
  >;

  whitelistMasterContract: TypedContractMethod<
    [masterContract: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  whitelistedMasterContracts: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deploy"
  ): TypedContractMethod<
    [masterContract: AddressLike, data: BytesLike, useCreate2: boolean],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "masterContractApproved"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "masterContractOf"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerProtocol"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMasterContractApproval"
  ): TypedContractMethod<
    [
      user: AddressLike,
      masterContract: AddressLike,
      approved: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<
    [newOwner: AddressLike, direct: boolean, renounce: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelistMasterContract"
  ): TypedContractMethod<
    [masterContract: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelistedMasterContracts"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "LogDeploy"
  ): TypedContractEvent<
    LogDeployEvent.InputTuple,
    LogDeployEvent.OutputTuple,
    LogDeployEvent.OutputObject
  >;
  getEvent(
    key: "LogRegisterProtocol"
  ): TypedContractEvent<
    LogRegisterProtocolEvent.InputTuple,
    LogRegisterProtocolEvent.OutputTuple,
    LogRegisterProtocolEvent.OutputObject
  >;
  getEvent(
    key: "LogSetMasterContractApproval"
  ): TypedContractEvent<
    LogSetMasterContractApprovalEvent.InputTuple,
    LogSetMasterContractApprovalEvent.OutputTuple,
    LogSetMasterContractApprovalEvent.OutputObject
  >;
  getEvent(
    key: "LogWhiteListMasterContract"
  ): TypedContractEvent<
    LogWhiteListMasterContractEvent.InputTuple,
    LogWhiteListMasterContractEvent.OutputTuple,
    LogWhiteListMasterContractEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "LogDeploy(address,bytes,address)": TypedContractEvent<
      LogDeployEvent.InputTuple,
      LogDeployEvent.OutputTuple,
      LogDeployEvent.OutputObject
    >;
    LogDeploy: TypedContractEvent<
      LogDeployEvent.InputTuple,
      LogDeployEvent.OutputTuple,
      LogDeployEvent.OutputObject
    >;

    "LogRegisterProtocol(address)": TypedContractEvent<
      LogRegisterProtocolEvent.InputTuple,
      LogRegisterProtocolEvent.OutputTuple,
      LogRegisterProtocolEvent.OutputObject
    >;
    LogRegisterProtocol: TypedContractEvent<
      LogRegisterProtocolEvent.InputTuple,
      LogRegisterProtocolEvent.OutputTuple,
      LogRegisterProtocolEvent.OutputObject
    >;

    "LogSetMasterContractApproval(address,address,bool)": TypedContractEvent<
      LogSetMasterContractApprovalEvent.InputTuple,
      LogSetMasterContractApprovalEvent.OutputTuple,
      LogSetMasterContractApprovalEvent.OutputObject
    >;
    LogSetMasterContractApproval: TypedContractEvent<
      LogSetMasterContractApprovalEvent.InputTuple,
      LogSetMasterContractApprovalEvent.OutputTuple,
      LogSetMasterContractApprovalEvent.OutputObject
    >;

    "LogWhiteListMasterContract(address,bool)": TypedContractEvent<
      LogWhiteListMasterContractEvent.InputTuple,
      LogWhiteListMasterContractEvent.OutputTuple,
      LogWhiteListMasterContractEvent.OutputObject
    >;
    LogWhiteListMasterContract: TypedContractEvent<
      LogWhiteListMasterContractEvent.InputTuple,
      LogWhiteListMasterContractEvent.OutputTuple,
      LogWhiteListMasterContractEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
