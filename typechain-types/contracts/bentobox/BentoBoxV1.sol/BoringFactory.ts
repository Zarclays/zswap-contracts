/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface BoringFactoryInterface extends Interface {
  getFunction(nameOrSignature: "deploy" | "masterContractOf"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "LogDeploy"): EventFragment;

  encodeFunctionData(
    functionFragment: "deploy",
    values: [AddressLike, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "masterContractOf",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterContractOf",
    data: BytesLike
  ): Result;
}

export namespace LogDeployEvent {
  export type InputTuple = [
    masterContract: AddressLike,
    data: BytesLike,
    cloneAddress: AddressLike
  ];
  export type OutputTuple = [
    masterContract: string,
    data: string,
    cloneAddress: string
  ];
  export interface OutputObject {
    masterContract: string;
    data: string;
    cloneAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BoringFactory extends BaseContract {
  connect(runner?: ContractRunner | null): BoringFactory;
  waitForDeployment(): Promise<this>;

  interface: BoringFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deploy: TypedContractMethod<
    [masterContract: AddressLike, data: BytesLike, useCreate2: boolean],
    [string],
    "payable"
  >;

  masterContractOf: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deploy"
  ): TypedContractMethod<
    [masterContract: AddressLike, data: BytesLike, useCreate2: boolean],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "masterContractOf"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getEvent(
    key: "LogDeploy"
  ): TypedContractEvent<
    LogDeployEvent.InputTuple,
    LogDeployEvent.OutputTuple,
    LogDeployEvent.OutputObject
  >;

  filters: {
    "LogDeploy(address,bytes,address)": TypedContractEvent<
      LogDeployEvent.InputTuple,
      LogDeployEvent.OutputTuple,
      LogDeployEvent.OutputObject
    >;
    LogDeploy: TypedContractEvent<
      LogDeployEvent.InputTuple,
      LogDeployEvent.OutputTuple,
      LogDeployEvent.OutputObject
    >;
  };
}
