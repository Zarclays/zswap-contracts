/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ZSwapMakerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bar"
      | "bridgeFor"
      | "convert"
      | "convertMultiple"
      | "factory"
      | "owner"
      | "renounceOwnership"
      | "setBridge"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LogBridgeSet"
      | "LogConvert"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "bar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bridgeFor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "convert",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "convertMultiple",
    values: [AddressLike[], AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBridge",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "bar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridgeFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace LogBridgeSetEvent {
  export type InputTuple = [token: AddressLike, bridge: AddressLike];
  export type OutputTuple = [token: string, bridge: string];
  export interface OutputObject {
    token: string;
    bridge: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogConvertEvent {
  export type InputTuple = [
    server: AddressLike,
    token0: AddressLike,
    token1: AddressLike,
    amount0: BigNumberish,
    amount1: BigNumberish,
    amountSUSHI: BigNumberish
  ];
  export type OutputTuple = [
    server: string,
    token0: string,
    token1: string,
    amount0: bigint,
    amount1: bigint,
    amountSUSHI: bigint
  ];
  export interface OutputObject {
    server: string;
    token0: string;
    token1: string;
    amount0: bigint;
    amount1: bigint;
    amountSUSHI: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZSwapMaker extends BaseContract {
  connect(runner?: ContractRunner | null): ZSwapMaker;
  waitForDeployment(): Promise<this>;

  interface: ZSwapMakerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bar: TypedContractMethod<[], [string], "view">;

  bridgeFor: TypedContractMethod<[token: AddressLike], [string], "view">;

  convert: TypedContractMethod<
    [token0: AddressLike, token1: AddressLike],
    [void],
    "nonpayable"
  >;

  convertMultiple: TypedContractMethod<
    [token0: AddressLike[], token1: AddressLike[]],
    [void],
    "nonpayable"
  >;

  factory: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setBridge: TypedContractMethod<
    [token: AddressLike, bridge: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bar"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bridgeFor"
  ): TypedContractMethod<[token: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "convert"
  ): TypedContractMethod<
    [token0: AddressLike, token1: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "convertMultiple"
  ): TypedContractMethod<
    [token0: AddressLike[], token1: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBridge"
  ): TypedContractMethod<
    [token: AddressLike, bridge: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "LogBridgeSet"
  ): TypedContractEvent<
    LogBridgeSetEvent.InputTuple,
    LogBridgeSetEvent.OutputTuple,
    LogBridgeSetEvent.OutputObject
  >;
  getEvent(
    key: "LogConvert"
  ): TypedContractEvent<
    LogConvertEvent.InputTuple,
    LogConvertEvent.OutputTuple,
    LogConvertEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "LogBridgeSet(address,address)": TypedContractEvent<
      LogBridgeSetEvent.InputTuple,
      LogBridgeSetEvent.OutputTuple,
      LogBridgeSetEvent.OutputObject
    >;
    LogBridgeSet: TypedContractEvent<
      LogBridgeSetEvent.InputTuple,
      LogBridgeSetEvent.OutputTuple,
      LogBridgeSetEvent.OutputObject
    >;

    "LogConvert(address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      LogConvertEvent.InputTuple,
      LogConvertEvent.OutputTuple,
      LogConvertEvent.OutputObject
    >;
    LogConvert: TypedContractEvent<
      LogConvertEvent.InputTuple,
      LogConvertEvent.OutputTuple,
      LogConvertEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
