/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace CloneRewarderTime {
  export type PoolInfoStruct = {
    accToken1PerShare: BigNumberish;
    lastRewardTime: BigNumberish;
  };

  export type PoolInfoStructOutput = [
    accToken1PerShare: bigint,
    lastRewardTime: bigint
  ] & { accToken1PerShare: bigint; lastRewardTime: bigint };
}

export interface CloneRewarderTimeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MASTERCHEF_V2"
      | "claimOwnership"
      | "init"
      | "masterLpToken"
      | "onSushiReward"
      | "owner"
      | "pendingOwner"
      | "pendingToken"
      | "pendingTokens"
      | "poolInfo"
      | "reclaimTokens"
      | "rewardPerSecond"
      | "rewardRates"
      | "rewardToken"
      | "setRewardPerSecond"
      | "transferOwnership"
      | "updatePool"
      | "userInfo"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LogInit"
      | "LogOnReward"
      | "LogRewardPerSecond"
      | "LogUpdatePool"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MASTERCHEF_V2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "init", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "masterLpToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onSushiReward",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingToken",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingTokens",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reclaimTokens",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardPerSecond",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MASTERCHEF_V2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterLpToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onSushiReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reclaimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
}

export namespace LogInitEvent {
  export type InputTuple = [
    rewardToken: AddressLike,
    owner: AddressLike,
    rewardPerSecond: BigNumberish,
    masterLpToken: AddressLike
  ];
  export type OutputTuple = [
    rewardToken: string,
    owner: string,
    rewardPerSecond: bigint,
    masterLpToken: string
  ];
  export interface OutputObject {
    rewardToken: string;
    owner: string;
    rewardPerSecond: bigint;
    masterLpToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogOnRewardEvent {
  export type InputTuple = [
    user: AddressLike,
    pid: BigNumberish,
    amount: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [
    user: string,
    pid: bigint,
    amount: bigint,
    to: string
  ];
  export interface OutputObject {
    user: string;
    pid: bigint;
    amount: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogRewardPerSecondEvent {
  export type InputTuple = [rewardPerSecond: BigNumberish];
  export type OutputTuple = [rewardPerSecond: bigint];
  export interface OutputObject {
    rewardPerSecond: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogUpdatePoolEvent {
  export type InputTuple = [
    pid: BigNumberish,
    lastRewardTime: BigNumberish,
    lpSupply: BigNumberish,
    accToken1PerShare: BigNumberish
  ];
  export type OutputTuple = [
    pid: bigint,
    lastRewardTime: bigint,
    lpSupply: bigint,
    accToken1PerShare: bigint
  ];
  export interface OutputObject {
    pid: bigint;
    lastRewardTime: bigint;
    lpSupply: bigint;
    accToken1PerShare: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CloneRewarderTime extends BaseContract {
  connect(runner?: ContractRunner | null): CloneRewarderTime;
  waitForDeployment(): Promise<this>;

  interface: CloneRewarderTimeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MASTERCHEF_V2: TypedContractMethod<[], [string], "view">;

  claimOwnership: TypedContractMethod<[], [void], "nonpayable">;

  init: TypedContractMethod<[data: BytesLike], [void], "payable">;

  masterLpToken: TypedContractMethod<[], [string], "view">;

  onSushiReward: TypedContractMethod<
    [
      pid: BigNumberish,
      _user: AddressLike,
      to: AddressLike,
      arg3: BigNumberish,
      lpTokenAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  pendingToken: TypedContractMethod<
    [_pid: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;

  pendingTokens: TypedContractMethod<
    [pid: BigNumberish, user: AddressLike, arg2: BigNumberish],
    [
      [string[], bigint[]] & { rewardTokens: string[]; rewardAmounts: bigint[] }
    ],
    "view"
  >;

  poolInfo: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { accToken1PerShare: bigint; lastRewardTime: bigint }],
    "view"
  >;

  reclaimTokens: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  rewardPerSecond: TypedContractMethod<[], [bigint], "view">;

  rewardRates: TypedContractMethod<[], [bigint[]], "view">;

  rewardToken: TypedContractMethod<[], [string], "view">;

  setRewardPerSecond: TypedContractMethod<
    [_rewardPerSecond: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike, direct: boolean, renounce: boolean],
    [void],
    "nonpayable"
  >;

  updatePool: TypedContractMethod<
    [pid: BigNumberish],
    [CloneRewarderTime.PoolInfoStructOutput],
    "nonpayable"
  >;

  userInfo: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, bigint, bigint] & {
        amount: bigint;
        rewardDebt: bigint;
        unpaidRewards: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MASTERCHEF_V2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<[data: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "masterLpToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onSushiReward"
  ): TypedContractMethod<
    [
      pid: BigNumberish,
      _user: AddressLike,
      to: AddressLike,
      arg3: BigNumberish,
      lpTokenAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingToken"
  ): TypedContractMethod<
    [_pid: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pendingTokens"
  ): TypedContractMethod<
    [pid: BigNumberish, user: AddressLike, arg2: BigNumberish],
    [
      [string[], bigint[]] & { rewardTokens: string[]; rewardAmounts: bigint[] }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolInfo"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { accToken1PerShare: bigint; lastRewardTime: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "reclaimTokens"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardPerSecond"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardRates"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "rewardToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setRewardPerSecond"
  ): TypedContractMethod<
    [_rewardPerSecond: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<
    [newOwner: AddressLike, direct: boolean, renounce: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePool"
  ): TypedContractMethod<
    [pid: BigNumberish],
    [CloneRewarderTime.PoolInfoStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userInfo"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, bigint, bigint] & {
        amount: bigint;
        rewardDebt: bigint;
        unpaidRewards: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "LogInit"
  ): TypedContractEvent<
    LogInitEvent.InputTuple,
    LogInitEvent.OutputTuple,
    LogInitEvent.OutputObject
  >;
  getEvent(
    key: "LogOnReward"
  ): TypedContractEvent<
    LogOnRewardEvent.InputTuple,
    LogOnRewardEvent.OutputTuple,
    LogOnRewardEvent.OutputObject
  >;
  getEvent(
    key: "LogRewardPerSecond"
  ): TypedContractEvent<
    LogRewardPerSecondEvent.InputTuple,
    LogRewardPerSecondEvent.OutputTuple,
    LogRewardPerSecondEvent.OutputObject
  >;
  getEvent(
    key: "LogUpdatePool"
  ): TypedContractEvent<
    LogUpdatePoolEvent.InputTuple,
    LogUpdatePoolEvent.OutputTuple,
    LogUpdatePoolEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "LogInit(address,address,uint256,address)": TypedContractEvent<
      LogInitEvent.InputTuple,
      LogInitEvent.OutputTuple,
      LogInitEvent.OutputObject
    >;
    LogInit: TypedContractEvent<
      LogInitEvent.InputTuple,
      LogInitEvent.OutputTuple,
      LogInitEvent.OutputObject
    >;

    "LogOnReward(address,uint256,uint256,address)": TypedContractEvent<
      LogOnRewardEvent.InputTuple,
      LogOnRewardEvent.OutputTuple,
      LogOnRewardEvent.OutputObject
    >;
    LogOnReward: TypedContractEvent<
      LogOnRewardEvent.InputTuple,
      LogOnRewardEvent.OutputTuple,
      LogOnRewardEvent.OutputObject
    >;

    "LogRewardPerSecond(uint256)": TypedContractEvent<
      LogRewardPerSecondEvent.InputTuple,
      LogRewardPerSecondEvent.OutputTuple,
      LogRewardPerSecondEvent.OutputObject
    >;
    LogRewardPerSecond: TypedContractEvent<
      LogRewardPerSecondEvent.InputTuple,
      LogRewardPerSecondEvent.OutputTuple,
      LogRewardPerSecondEvent.OutputObject
    >;

    "LogUpdatePool(uint256,uint64,uint256,uint256)": TypedContractEvent<
      LogUpdatePoolEvent.InputTuple,
      LogUpdatePoolEvent.OutputTuple,
      LogUpdatePoolEvent.OutputObject
    >;
    LogUpdatePool: TypedContractEvent<
      LogUpdatePoolEvent.InputTuple,
      LogUpdatePoolEvent.OutputTuple,
      LogUpdatePoolEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
