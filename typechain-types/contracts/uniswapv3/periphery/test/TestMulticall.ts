/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace TestMulticall {
  export type TupleStruct = { a: BigNumberish; b: BigNumberish };

  export type TupleStructOutput = [a: bigint, b: bigint] & {
    a: bigint;
    b: bigint;
  };
}

export interface TestMulticallInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "functionThatReturnsTuple"
      | "functionThatRevertsWithError"
      | "multicall"
      | "paid"
      | "pays"
      | "returnSender"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "functionThatReturnsTuple",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "functionThatRevertsWithError",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "paid", values?: undefined): string;
  encodeFunctionData(functionFragment: "pays", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "returnSender",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "functionThatReturnsTuple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionThatRevertsWithError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pays", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "returnSender",
    data: BytesLike
  ): Result;
}

export interface TestMulticall extends BaseContract {
  connect(runner?: ContractRunner | null): TestMulticall;
  waitForDeployment(): Promise<this>;

  interface: TestMulticallInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  functionThatReturnsTuple: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [TestMulticall.TupleStructOutput],
    "view"
  >;

  functionThatRevertsWithError: TypedContractMethod<
    [error: string],
    [void],
    "view"
  >;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "payable">;

  paid: TypedContractMethod<[], [bigint], "view">;

  pays: TypedContractMethod<[], [void], "payable">;

  returnSender: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "functionThatReturnsTuple"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [TestMulticall.TupleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "functionThatRevertsWithError"
  ): TypedContractMethod<[error: string], [void], "view">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "payable">;
  getFunction(
    nameOrSignature: "paid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pays"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "returnSender"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
