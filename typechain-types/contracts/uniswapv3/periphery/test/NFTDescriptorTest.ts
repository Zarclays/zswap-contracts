/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace NFTDescriptor {
  export type ConstructTokenURIParamsStruct = {
    tokenId: BigNumberish;
    quoteTokenAddress: AddressLike;
    baseTokenAddress: AddressLike;
    quoteTokenSymbol: string;
    baseTokenSymbol: string;
    quoteTokenDecimals: BigNumberish;
    baseTokenDecimals: BigNumberish;
    flipRatio: boolean;
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    tickCurrent: BigNumberish;
    tickSpacing: BigNumberish;
    fee: BigNumberish;
    poolAddress: AddressLike;
  };

  export type ConstructTokenURIParamsStructOutput = [
    tokenId: bigint,
    quoteTokenAddress: string,
    baseTokenAddress: string,
    quoteTokenSymbol: string,
    baseTokenSymbol: string,
    quoteTokenDecimals: bigint,
    baseTokenDecimals: bigint,
    flipRatio: boolean,
    tickLower: bigint,
    tickUpper: bigint,
    tickCurrent: bigint,
    tickSpacing: bigint,
    fee: bigint,
    poolAddress: string
  ] & {
    tokenId: bigint;
    quoteTokenAddress: string;
    baseTokenAddress: string;
    quoteTokenSymbol: string;
    baseTokenSymbol: string;
    quoteTokenDecimals: bigint;
    baseTokenDecimals: bigint;
    flipRatio: boolean;
    tickLower: bigint;
    tickUpper: bigint;
    tickCurrent: bigint;
    tickSpacing: bigint;
    fee: bigint;
    poolAddress: string;
  };
}

export interface NFTDescriptorTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addressToString"
      | "constructTokenURI"
      | "feeToPercentString"
      | "fixedPointToDecimalString"
      | "generateSVGImage"
      | "getGasCostOfConstructTokenURI"
      | "isRare"
      | "rangeLocation"
      | "sliceTokenHex"
      | "tickToDecimalString"
      | "tokenToColorHex"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addressToString",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "constructTokenURI",
    values: [NFTDescriptor.ConstructTokenURIParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "feeToPercentString",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedPointToDecimalString",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateSVGImage",
    values: [NFTDescriptor.ConstructTokenURIParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfConstructTokenURI",
    values: [NFTDescriptor.ConstructTokenURIParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isRare",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rangeLocation",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sliceTokenHex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tickToDecimalString",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToColorHex",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressToString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "constructTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeToPercentString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixedPointToDecimalString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateSVGImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfConstructTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isRare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rangeLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sliceTokenHex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tickToDecimalString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToColorHex",
    data: BytesLike
  ): Result;
}

export interface NFTDescriptorTest extends BaseContract {
  connect(runner?: ContractRunner | null): NFTDescriptorTest;
  waitForDeployment(): Promise<this>;

  interface: NFTDescriptorTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addressToString: TypedContractMethod<
    [_address: AddressLike],
    [string],
    "view"
  >;

  constructTokenURI: TypedContractMethod<
    [params: NFTDescriptor.ConstructTokenURIParamsStruct],
    [string],
    "view"
  >;

  feeToPercentString: TypedContractMethod<
    [fee: BigNumberish],
    [string],
    "view"
  >;

  fixedPointToDecimalString: TypedContractMethod<
    [
      sqrtRatioX96: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish
    ],
    [string],
    "view"
  >;

  generateSVGImage: TypedContractMethod<
    [params: NFTDescriptor.ConstructTokenURIParamsStruct],
    [string],
    "view"
  >;

  getGasCostOfConstructTokenURI: TypedContractMethod<
    [params: NFTDescriptor.ConstructTokenURIParamsStruct],
    [bigint],
    "view"
  >;

  isRare: TypedContractMethod<
    [tokenId: BigNumberish, poolAddress: AddressLike],
    [boolean],
    "view"
  >;

  rangeLocation: TypedContractMethod<
    [tickLower: BigNumberish, tickUpper: BigNumberish],
    [[string, string]],
    "view"
  >;

  sliceTokenHex: TypedContractMethod<
    [token: AddressLike, offset: BigNumberish],
    [bigint],
    "view"
  >;

  tickToDecimalString: TypedContractMethod<
    [
      tick: BigNumberish,
      tickSpacing: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      flipRatio: boolean
    ],
    [string],
    "view"
  >;

  tokenToColorHex: TypedContractMethod<
    [token: AddressLike, offset: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addressToString"
  ): TypedContractMethod<[_address: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "constructTokenURI"
  ): TypedContractMethod<
    [params: NFTDescriptor.ConstructTokenURIParamsStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "feeToPercentString"
  ): TypedContractMethod<[fee: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "fixedPointToDecimalString"
  ): TypedContractMethod<
    [
      sqrtRatioX96: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "generateSVGImage"
  ): TypedContractMethod<
    [params: NFTDescriptor.ConstructTokenURIParamsStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGasCostOfConstructTokenURI"
  ): TypedContractMethod<
    [params: NFTDescriptor.ConstructTokenURIParamsStruct],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRare"
  ): TypedContractMethod<
    [tokenId: BigNumberish, poolAddress: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "rangeLocation"
  ): TypedContractMethod<
    [tickLower: BigNumberish, tickUpper: BigNumberish],
    [[string, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "sliceTokenHex"
  ): TypedContractMethod<
    [token: AddressLike, offset: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tickToDecimalString"
  ): TypedContractMethod<
    [
      tick: BigNumberish,
      tickSpacing: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      flipRatio: boolean
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenToColorHex"
  ): TypedContractMethod<
    [token: AddressLike, offset: BigNumberish],
    [string],
    "view"
  >;

  filters: {};
}
