/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface PathTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "decodeFirstPool"
      | "getFirstPool"
      | "getGasCostOfDecodeFirstPool"
      | "hasMultiplePools"
      | "skipToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "decodeFirstPool",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFirstPool",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfDecodeFirstPool",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasMultiplePools",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "skipToken",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "decodeFirstPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFirstPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfDecodeFirstPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasMultiplePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "skipToken", data: BytesLike): Result;
}

export interface PathTest extends BaseContract {
  connect(runner?: ContractRunner | null): PathTest;
  waitForDeployment(): Promise<this>;

  interface: PathTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  decodeFirstPool: TypedContractMethod<
    [path: BytesLike],
    [
      [string, string, bigint] & { tokenA: string; tokenB: string; fee: bigint }
    ],
    "view"
  >;

  getFirstPool: TypedContractMethod<[path: BytesLike], [string], "view">;

  getGasCostOfDecodeFirstPool: TypedContractMethod<
    [path: BytesLike],
    [bigint],
    "view"
  >;

  hasMultiplePools: TypedContractMethod<[path: BytesLike], [boolean], "view">;

  skipToken: TypedContractMethod<[path: BytesLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "decodeFirstPool"
  ): TypedContractMethod<
    [path: BytesLike],
    [
      [string, string, bigint] & { tokenA: string; tokenB: string; fee: bigint }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFirstPool"
  ): TypedContractMethod<[path: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getGasCostOfDecodeFirstPool"
  ): TypedContractMethod<[path: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasMultiplePools"
  ): TypedContractMethod<[path: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "skipToken"
  ): TypedContractMethod<[path: BytesLike], [string], "view">;

  filters: {};
}
