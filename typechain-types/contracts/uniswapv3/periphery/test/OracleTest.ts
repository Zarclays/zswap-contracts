/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace OracleLibrary {
  export type WeightedTickDataStruct = {
    tick: BigNumberish;
    weight: BigNumberish;
  };

  export type WeightedTickDataStructOutput = [tick: bigint, weight: bigint] & {
    tick: bigint;
    weight: bigint;
  };
}

export interface OracleTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "consult"
      | "getBlockStartingTickAndLiquidity"
      | "getChainedPrice"
      | "getGasCostOfConsult"
      | "getGasCostOfGetQuoteAtTick"
      | "getOldestObservationSecondsAgo"
      | "getQuoteAtTick"
      | "getWeightedArithmeticMeanTick"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "consult",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockStartingTickAndLiquidity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainedPrice",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfConsult",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfGetQuoteAtTick",
    values: [BigNumberish, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOldestObservationSecondsAgo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteAtTick",
    values: [BigNumberish, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWeightedArithmeticMeanTick",
    values: [OracleLibrary.WeightedTickDataStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "consult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlockStartingTickAndLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfConsult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfGetQuoteAtTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOldestObservationSecondsAgo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteAtTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWeightedArithmeticMeanTick",
    data: BytesLike
  ): Result;
}

export interface OracleTest extends BaseContract {
  connect(runner?: ContractRunner | null): OracleTest;
  waitForDeployment(): Promise<this>;

  interface: OracleTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  consult: TypedContractMethod<
    [pool: AddressLike, secondsAgo: BigNumberish],
    [
      [bigint, bigint] & {
        arithmeticMeanTick: bigint;
        harmonicMeanLiquidity: bigint;
      }
    ],
    "view"
  >;

  getBlockStartingTickAndLiquidity: TypedContractMethod<
    [pool: AddressLike],
    [[bigint, bigint]],
    "view"
  >;

  getChainedPrice: TypedContractMethod<
    [tokens: AddressLike[], ticks: BigNumberish[]],
    [bigint],
    "view"
  >;

  getGasCostOfConsult: TypedContractMethod<
    [pool: AddressLike, period: BigNumberish],
    [bigint],
    "view"
  >;

  getGasCostOfGetQuoteAtTick: TypedContractMethod<
    [
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: AddressLike,
      quoteToken: AddressLike
    ],
    [bigint],
    "view"
  >;

  getOldestObservationSecondsAgo: TypedContractMethod<
    [pool: AddressLike],
    [[bigint, bigint] & { secondsAgo: bigint; currentTimestamp: bigint }],
    "view"
  >;

  getQuoteAtTick: TypedContractMethod<
    [
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: AddressLike,
      quoteToken: AddressLike
    ],
    [bigint],
    "view"
  >;

  getWeightedArithmeticMeanTick: TypedContractMethod<
    [observations: OracleLibrary.WeightedTickDataStruct[]],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "consult"
  ): TypedContractMethod<
    [pool: AddressLike, secondsAgo: BigNumberish],
    [
      [bigint, bigint] & {
        arithmeticMeanTick: bigint;
        harmonicMeanLiquidity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBlockStartingTickAndLiquidity"
  ): TypedContractMethod<[pool: AddressLike], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getChainedPrice"
  ): TypedContractMethod<
    [tokens: AddressLike[], ticks: BigNumberish[]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGasCostOfConsult"
  ): TypedContractMethod<
    [pool: AddressLike, period: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGasCostOfGetQuoteAtTick"
  ): TypedContractMethod<
    [
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: AddressLike,
      quoteToken: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOldestObservationSecondsAgo"
  ): TypedContractMethod<
    [pool: AddressLike],
    [[bigint, bigint] & { secondsAgo: bigint; currentTimestamp: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getQuoteAtTick"
  ): TypedContractMethod<
    [
      tick: BigNumberish,
      baseAmount: BigNumberish,
      baseToken: AddressLike,
      quoteToken: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWeightedArithmeticMeanTick"
  ): TypedContractMethod<
    [observations: OracleLibrary.WeightedTickDataStruct[]],
    [bigint],
    "view"
  >;

  filters: {};
}
