/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface LiquidityAmountsTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAmount0ForLiquidity"
      | "getAmount1ForLiquidity"
      | "getAmountsForLiquidity"
      | "getGasCostOfGetAmount0ForLiquidity"
      | "getGasCostOfGetAmount1ForLiquidity"
      | "getGasCostOfGetAmountsForLiquidity"
      | "getGasCostOfGetLiquidityForAmount0"
      | "getGasCostOfGetLiquidityForAmount1"
      | "getGasCostOfGetLiquidityForAmounts"
      | "getLiquidityForAmount0"
      | "getLiquidityForAmount1"
      | "getLiquidityForAmounts"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAmount0ForLiquidity",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmount1ForLiquidity",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsForLiquidity",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfGetAmount0ForLiquidity",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfGetAmount1ForLiquidity",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfGetAmountsForLiquidity",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfGetLiquidityForAmount0",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfGetLiquidityForAmount1",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfGetLiquidityForAmounts",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityForAmount0",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityForAmount1",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityForAmounts",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAmount0ForLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmount1ForLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsForLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfGetAmount0ForLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfGetAmount1ForLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfGetAmountsForLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfGetLiquidityForAmount0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfGetLiquidityForAmount1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfGetLiquidityForAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityForAmount0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityForAmount1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityForAmounts",
    data: BytesLike
  ): Result;
}

export interface LiquidityAmountsTest extends BaseContract {
  connect(runner?: ContractRunner | null): LiquidityAmountsTest;
  waitForDeployment(): Promise<this>;

  interface: LiquidityAmountsTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAmount0ForLiquidity: TypedContractMethod<
    [
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      liquidity: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getAmount1ForLiquidity: TypedContractMethod<
    [
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      liquidity: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getAmountsForLiquidity: TypedContractMethod<
    [
      sqrtRatioX96: BigNumberish,
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      liquidity: BigNumberish
    ],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "view"
  >;

  getGasCostOfGetAmount0ForLiquidity: TypedContractMethod<
    [
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      liquidity: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getGasCostOfGetAmount1ForLiquidity: TypedContractMethod<
    [
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      liquidity: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getGasCostOfGetAmountsForLiquidity: TypedContractMethod<
    [
      sqrtRatioX96: BigNumberish,
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      liquidity: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getGasCostOfGetLiquidityForAmount0: TypedContractMethod<
    [
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      amount0: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getGasCostOfGetLiquidityForAmount1: TypedContractMethod<
    [
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      amount1: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getGasCostOfGetLiquidityForAmounts: TypedContractMethod<
    [
      sqrtRatioX96: BigNumberish,
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getLiquidityForAmount0: TypedContractMethod<
    [
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      amount0: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getLiquidityForAmount1: TypedContractMethod<
    [
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      amount1: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getLiquidityForAmounts: TypedContractMethod<
    [
      sqrtRatioX96: BigNumberish,
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAmount0ForLiquidity"
  ): TypedContractMethod<
    [
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      liquidity: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAmount1ForLiquidity"
  ): TypedContractMethod<
    [
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      liquidity: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAmountsForLiquidity"
  ): TypedContractMethod<
    [
      sqrtRatioX96: BigNumberish,
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      liquidity: BigNumberish
    ],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGasCostOfGetAmount0ForLiquidity"
  ): TypedContractMethod<
    [
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      liquidity: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGasCostOfGetAmount1ForLiquidity"
  ): TypedContractMethod<
    [
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      liquidity: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGasCostOfGetAmountsForLiquidity"
  ): TypedContractMethod<
    [
      sqrtRatioX96: BigNumberish,
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      liquidity: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGasCostOfGetLiquidityForAmount0"
  ): TypedContractMethod<
    [
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      amount0: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGasCostOfGetLiquidityForAmount1"
  ): TypedContractMethod<
    [
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      amount1: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGasCostOfGetLiquidityForAmounts"
  ): TypedContractMethod<
    [
      sqrtRatioX96: BigNumberish,
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLiquidityForAmount0"
  ): TypedContractMethod<
    [
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      amount0: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLiquidityForAmount1"
  ): TypedContractMethod<
    [
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      amount1: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLiquidityForAmounts"
  ): TypedContractMethod<
    [
      sqrtRatioX96: BigNumberish,
      sqrtRatioAX96: BigNumberish,
      sqrtRatioBX96: BigNumberish,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [bigint],
    "view"
  >;

  filters: {};
}
