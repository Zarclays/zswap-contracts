/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace MasterChefV2 {
  export type PoolInfoStruct = {
    accSushiPerShare: BigNumberish;
    lastRewardBlock: BigNumberish;
    allocPoint: BigNumberish;
  };

  export type PoolInfoStructOutput = [
    accSushiPerShare: bigint,
    lastRewardBlock: bigint,
    allocPoint: bigint
  ] & { accSushiPerShare: bigint; lastRewardBlock: bigint; allocPoint: bigint };
}

export interface MasterChefV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "MASTER_CHEF"
      | "MASTER_PID"
      | "SUSHI"
      | "add"
      | "batch"
      | "claimOwnership"
      | "deposit"
      | "emergencyWithdraw"
      | "harvest"
      | "harvestFromMasterChef"
      | "init"
      | "lpToken"
      | "massUpdatePools"
      | "migrate"
      | "migrator"
      | "owner"
      | "pendingOwner"
      | "pendingSushi"
      | "permitToken"
      | "poolInfo"
      | "poolLength"
      | "rewarder"
      | "set"
      | "setMigrator"
      | "sushiPerBlock"
      | "totalAllocPoint"
      | "transferOwnership"
      | "updatePool"
      | "userInfo"
      | "withdraw"
      | "withdrawAndHarvest"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deposit"
      | "EmergencyWithdraw"
      | "Harvest"
      | "LogInit"
      | "LogPoolAddition"
      | "LogSetPool"
      | "LogUpdatePool"
      | "OwnershipTransferred"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MASTER_CHEF",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MASTER_PID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SUSHI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batch",
    values: [BytesLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestFromMasterChef",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "init", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "lpToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "migrator", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingSushi",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "permitToken",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewarder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMigrator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sushiPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndHarvest",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MASTER_CHEF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MASTER_PID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SUSHI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestFromMasterChef",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingSushi",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewarder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMigrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sushiPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndHarvest",
    data: BytesLike
  ): Result;
}

export namespace DepositEvent {
  export type InputTuple = [
    user: AddressLike,
    pid: BigNumberish,
    amount: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [
    user: string,
    pid: bigint,
    amount: bigint,
    to: string
  ];
  export interface OutputObject {
    user: string;
    pid: bigint;
    amount: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyWithdrawEvent {
  export type InputTuple = [
    user: AddressLike,
    pid: BigNumberish,
    amount: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [
    user: string,
    pid: bigint,
    amount: bigint,
    to: string
  ];
  export interface OutputObject {
    user: string;
    pid: bigint;
    amount: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HarvestEvent {
  export type InputTuple = [
    user: AddressLike,
    pid: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, pid: bigint, amount: bigint];
  export interface OutputObject {
    user: string;
    pid: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogInitEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogPoolAdditionEvent {
  export type InputTuple = [
    pid: BigNumberish,
    allocPoint: BigNumberish,
    lpToken: AddressLike,
    rewarder: AddressLike
  ];
  export type OutputTuple = [
    pid: bigint,
    allocPoint: bigint,
    lpToken: string,
    rewarder: string
  ];
  export interface OutputObject {
    pid: bigint;
    allocPoint: bigint;
    lpToken: string;
    rewarder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogSetPoolEvent {
  export type InputTuple = [
    pid: BigNumberish,
    allocPoint: BigNumberish,
    rewarder: AddressLike,
    overwrite: boolean
  ];
  export type OutputTuple = [
    pid: bigint,
    allocPoint: bigint,
    rewarder: string,
    overwrite: boolean
  ];
  export interface OutputObject {
    pid: bigint;
    allocPoint: bigint;
    rewarder: string;
    overwrite: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogUpdatePoolEvent {
  export type InputTuple = [
    pid: BigNumberish,
    lastRewardBlock: BigNumberish,
    lpSupply: BigNumberish,
    accSushiPerShare: BigNumberish
  ];
  export type OutputTuple = [
    pid: bigint,
    lastRewardBlock: bigint,
    lpSupply: bigint,
    accSushiPerShare: bigint
  ];
  export interface OutputObject {
    pid: bigint;
    lastRewardBlock: bigint;
    lpSupply: bigint;
    accSushiPerShare: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    user: AddressLike,
    pid: BigNumberish,
    amount: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [
    user: string,
    pid: bigint,
    amount: bigint,
    to: string
  ];
  export interface OutputObject {
    user: string;
    pid: bigint;
    amount: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MasterChefV2 extends BaseContract {
  connect(runner?: ContractRunner | null): MasterChefV2;
  waitForDeployment(): Promise<this>;

  interface: MasterChefV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MASTER_CHEF: TypedContractMethod<[], [string], "view">;

  MASTER_PID: TypedContractMethod<[], [bigint], "view">;

  SUSHI: TypedContractMethod<[], [string], "view">;

  add: TypedContractMethod<
    [allocPoint: BigNumberish, _lpToken: AddressLike, _rewarder: AddressLike],
    [void],
    "nonpayable"
  >;

  batch: TypedContractMethod<
    [calls: BytesLike[], revertOnFail: boolean],
    [[boolean[], string[]] & { successes: boolean[]; results: string[] }],
    "payable"
  >;

  claimOwnership: TypedContractMethod<[], [void], "nonpayable">;

  deposit: TypedContractMethod<
    [pid: BigNumberish, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [pid: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  harvest: TypedContractMethod<
    [pid: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  harvestFromMasterChef: TypedContractMethod<[], [void], "nonpayable">;

  init: TypedContractMethod<[dummyToken: AddressLike], [void], "nonpayable">;

  lpToken: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  massUpdatePools: TypedContractMethod<
    [pids: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  migrate: TypedContractMethod<[_pid: BigNumberish], [void], "nonpayable">;

  migrator: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  pendingSushi: TypedContractMethod<
    [_pid: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;

  permitToken: TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  poolInfo: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        accSushiPerShare: bigint;
        lastRewardBlock: bigint;
        allocPoint: bigint;
      }
    ],
    "view"
  >;

  poolLength: TypedContractMethod<[], [bigint], "view">;

  rewarder: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  set: TypedContractMethod<
    [
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: AddressLike,
      overwrite: boolean
    ],
    [void],
    "nonpayable"
  >;

  setMigrator: TypedContractMethod<
    [_migrator: AddressLike],
    [void],
    "nonpayable"
  >;

  sushiPerBlock: TypedContractMethod<[], [bigint], "view">;

  totalAllocPoint: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike, direct: boolean, renounce: boolean],
    [void],
    "nonpayable"
  >;

  updatePool: TypedContractMethod<
    [pid: BigNumberish],
    [MasterChefV2.PoolInfoStructOutput],
    "nonpayable"
  >;

  userInfo: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [[bigint, bigint] & { amount: bigint; rewardDebt: bigint }],
    "view"
  >;

  withdraw: TypedContractMethod<
    [pid: BigNumberish, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawAndHarvest: TypedContractMethod<
    [pid: BigNumberish, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MASTER_CHEF"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MASTER_PID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SUSHI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "add"
  ): TypedContractMethod<
    [allocPoint: BigNumberish, _lpToken: AddressLike, _rewarder: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batch"
  ): TypedContractMethod<
    [calls: BytesLike[], revertOnFail: boolean],
    [[boolean[], string[]] & { successes: boolean[]; results: string[] }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "claimOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [pid: BigNumberish, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [pid: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "harvest"
  ): TypedContractMethod<
    [pid: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "harvestFromMasterChef"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<[dummyToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lpToken"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "massUpdatePools"
  ): TypedContractMethod<[pids: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "migrate"
  ): TypedContractMethod<[_pid: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "migrator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingSushi"
  ): TypedContractMethod<
    [_pid: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "permitToken"
  ): TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "poolInfo"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        accSushiPerShare: bigint;
        lastRewardBlock: bigint;
        allocPoint: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewarder"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "set"
  ): TypedContractMethod<
    [
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: AddressLike,
      overwrite: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMigrator"
  ): TypedContractMethod<[_migrator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sushiPerBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalAllocPoint"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<
    [newOwner: AddressLike, direct: boolean, renounce: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePool"
  ): TypedContractMethod<
    [pid: BigNumberish],
    [MasterChefV2.PoolInfoStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userInfo"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [[bigint, bigint] & { amount: bigint; rewardDebt: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [pid: BigNumberish, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAndHarvest"
  ): TypedContractMethod<
    [pid: BigNumberish, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyWithdraw"
  ): TypedContractEvent<
    EmergencyWithdrawEvent.InputTuple,
    EmergencyWithdrawEvent.OutputTuple,
    EmergencyWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "Harvest"
  ): TypedContractEvent<
    HarvestEvent.InputTuple,
    HarvestEvent.OutputTuple,
    HarvestEvent.OutputObject
  >;
  getEvent(
    key: "LogInit"
  ): TypedContractEvent<
    LogInitEvent.InputTuple,
    LogInitEvent.OutputTuple,
    LogInitEvent.OutputObject
  >;
  getEvent(
    key: "LogPoolAddition"
  ): TypedContractEvent<
    LogPoolAdditionEvent.InputTuple,
    LogPoolAdditionEvent.OutputTuple,
    LogPoolAdditionEvent.OutputObject
  >;
  getEvent(
    key: "LogSetPool"
  ): TypedContractEvent<
    LogSetPoolEvent.InputTuple,
    LogSetPoolEvent.OutputTuple,
    LogSetPoolEvent.OutputObject
  >;
  getEvent(
    key: "LogUpdatePool"
  ): TypedContractEvent<
    LogUpdatePoolEvent.InputTuple,
    LogUpdatePoolEvent.OutputTuple,
    LogUpdatePoolEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Deposit(address,uint256,uint256,address)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "EmergencyWithdraw(address,uint256,uint256,address)": TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;
    EmergencyWithdraw: TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;

    "Harvest(address,uint256,uint256)": TypedContractEvent<
      HarvestEvent.InputTuple,
      HarvestEvent.OutputTuple,
      HarvestEvent.OutputObject
    >;
    Harvest: TypedContractEvent<
      HarvestEvent.InputTuple,
      HarvestEvent.OutputTuple,
      HarvestEvent.OutputObject
    >;

    "LogInit()": TypedContractEvent<
      LogInitEvent.InputTuple,
      LogInitEvent.OutputTuple,
      LogInitEvent.OutputObject
    >;
    LogInit: TypedContractEvent<
      LogInitEvent.InputTuple,
      LogInitEvent.OutputTuple,
      LogInitEvent.OutputObject
    >;

    "LogPoolAddition(uint256,uint256,address,address)": TypedContractEvent<
      LogPoolAdditionEvent.InputTuple,
      LogPoolAdditionEvent.OutputTuple,
      LogPoolAdditionEvent.OutputObject
    >;
    LogPoolAddition: TypedContractEvent<
      LogPoolAdditionEvent.InputTuple,
      LogPoolAdditionEvent.OutputTuple,
      LogPoolAdditionEvent.OutputObject
    >;

    "LogSetPool(uint256,uint256,address,bool)": TypedContractEvent<
      LogSetPoolEvent.InputTuple,
      LogSetPoolEvent.OutputTuple,
      LogSetPoolEvent.OutputObject
    >;
    LogSetPool: TypedContractEvent<
      LogSetPoolEvent.InputTuple,
      LogSetPoolEvent.OutputTuple,
      LogSetPoolEvent.OutputObject
    >;

    "LogUpdatePool(uint256,uint64,uint256,uint256)": TypedContractEvent<
      LogUpdatePoolEvent.InputTuple,
      LogUpdatePoolEvent.OutputTuple,
      LogUpdatePoolEvent.OutputObject
    >;
    LogUpdatePool: TypedContractEvent<
      LogUpdatePoolEvent.InputTuple,
      LogUpdatePoolEvent.OutputTuple,
      LogUpdatePoolEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Withdraw(address,uint256,uint256,address)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
