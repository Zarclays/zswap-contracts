/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  SushiMakerKashiExploitMock,
  SushiMakerKashiExploitMockInterface,
} from "../../../contracts/mocks/SushiMakerKashiExploitMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_sushiMaker",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "contract IKashiWithdrawFee",
        name: "kashiPair",
        type: "address",
      },
    ],
    name: "convert",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sushiMaker",
    outputs: [
      {
        internalType: "contract SushiMakerKashi",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516101d53803806101d58339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b031661016b61006a600039806089528060ad525061016b6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632bbdf75b1461003b578063def2489b1461005f575b600080fd5b610043610087565b604080516001600160a01b039092168252519081900360200190f35b6100856004803603602081101561007557600080fd5b50356001600160a01b03166100ab565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663def2489b826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561011a57600080fd5b505af115801561012e573d6000803e3d6000fd5b505050505056fea26469706673582212205a4dc00570b3c92d1349d51b5da727ff0b7298c6155d680d9b7a995a7e06495264736f6c634300060c0033";

type SushiMakerKashiExploitMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SushiMakerKashiExploitMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SushiMakerKashiExploitMock__factory extends ContractFactory {
  constructor(...args: SushiMakerKashiExploitMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _sushiMaker: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_sushiMaker, overrides || {});
  }
  override deploy(
    _sushiMaker: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_sushiMaker, overrides || {}) as Promise<
      SushiMakerKashiExploitMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): SushiMakerKashiExploitMock__factory {
    return super.connect(runner) as SushiMakerKashiExploitMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SushiMakerKashiExploitMockInterface {
    return new Interface(_abi) as SushiMakerKashiExploitMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SushiMakerKashiExploitMock {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as SushiMakerKashiExploitMock;
  }
}
