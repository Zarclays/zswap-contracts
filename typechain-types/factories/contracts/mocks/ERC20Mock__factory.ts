/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ERC20Mock,
  ERC20MockInterface,
} from "../../../contracts/mocks/ERC20Mock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "supply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "supply",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052346103e157610df980380380610019816103e6565b9283398101906060818303126103e15780516001600160401b0381116103e1578261004591830161040b565b60208201519092906001600160401b0381116103e15760409161006991840161040b565b91015182516001600160401b0381116102ea57600354600181811c911680156103d7575b60208210146102ca57601f8111610372575b506020601f821160011461030b5781929394600092610300575b50508160011b916000199060031b1c1916176003555b81516001600160401b0381116102ea57600454600181811c911680156102e0575b60208210146102ca57601f8111610265575b50602092601f821160011461020057928192936000926101f5575b50508160011b916000199060031b1c1916176004555b33156101b05760025481810180911161019a57600255336000526000602052604060002081815401905560405190815260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a360405161098290816104778239f35b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b01519050388061011d565b601f198216936004600052806000209160005b86811061024d5750836001959610610234575b505050811b01600455610133565b015160001960f88460031b161c19169055388080610226565b91926020600181928685015181550194019201610213565b60046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f830160051c810191602084106102c0575b601f0160051c01905b8181106102b45750610102565b600081556001016102a7565b909150819061029e565b634e487b7160e01b600052602260045260246000fd5b90607f16906100f0565b634e487b7160e01b600052604160045260246000fd5b0151905038806100b9565b601f198216906003600052806000209160005b81811061035a57509583600195969710610341575b505050811b016003556100cf565b015160001960f88460031b161c19169055388080610333565b9192602060018192868b01518155019401920161031e565b60036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c810191602084106103cd575b601f0160051c01905b8181106103c1575061009f565b600081556001016103b4565b90915081906103ab565b90607f169061008d565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176102ea57604052565b81601f820112156103e1578051906001600160401b0382116102ea5761043a601f8301601f19166020016103e6565b92828452602083830101116103e15760005b82811061046157505060206000918301015290565b8060208092840101518282870101520161044c56fe608080604052600436101561001357600080fd5b60003560e01c90816306fdde031461055a57508063095ea7b31461053457806318160ddd1461051657806323b872dd14610458578063313ce5671461043c57806339509351146103ea57806340c10f191461032c57806370a08231146102f257806395d89b41146101d1578063a457c2d71461012a578063a9059cbb146100f95763dd62ed3e146100a357600080fd5b346100f45760403660031901126100f4576100bc610676565b6100c461068c565b6001600160a01b039182166000908152600160209081526040808320949093168252928352819020549051908152f35b600080fd5b346100f45760403660031901126100f45761011f610115610676565b60243590336107cd565b602060405160018152f35b346100f45760403660031901126100f457610143610676565b60243590336000526001602052604060002060018060a01b0382166000526020526040600020549180831061017e5761011f920390336106c5565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608490fd5b346100f45760003660031901126100f45760405160006004548060011c906001811680156102e8575b6020831081146102d4578285529081156102b85750600114610261575b50819003601f01601f191681019067ffffffffffffffff82118183101761024b576102478291826040528261062d565b0390f35b634e487b7160e01b600052604160045260246000fd5b905060046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b6000905b8282106102a257506020915082010182610217565b600181602092548385880101520191019061028d565b90506020925060ff191682840152151560051b82010182610217565b634e487b7160e01b84526022600452602484fd5b91607f16916101fa565b346100f45760203660031901126100f4576001600160a01b03610313610676565b1660005260006020526020604060002054604051908152f35b346100f45760403660031901126100f457610345610676565b6001600160a01b031660243581156103a5577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020826103896000946002546106a2565b60025584845283825260408420818154019055604051908152a3005b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b346100f45760403660031901126100f45761011f610406610676565b336000526001602052604060002060018060a01b038216600052602052610435604060002060243590546106a2565b90336106c5565b346100f45760003660031901126100f457602060405160128152f35b346100f45760603660031901126100f457610471610676565b61047961068c565b6001600160a01b03821660009081526001602081815260408084203385529091529091205492604435929184016104b5575b61011f93506107cd565b8284106104d1576104cc8361011f950333836106c5565b6104ab565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b346100f45760003660031901126100f4576020600254604051908152f35b346100f45760403660031901126100f45761011f610550610676565b60243590336106c5565b346100f45760003660031901126100f45760006003548060011c90600181168015610623575b6020831081146102d4578285529081156102b857506001146105cc5750819003601f01601f191681019067ffffffffffffffff82118183101761024b576102478291826040528261062d565b905060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b6000905b82821061060d57506020915082010182610217565b60018160209254838588010152019101906105f8565b91607f1691610580565b91909160208152825180602083015260005b818110610660575060409293506000838284010152601f8019910116010190565b806020809287010151604082860101520161063f565b600435906001600160a01b03821682036100f457565b602435906001600160a01b03821682036100f457565b919082018092116106af57565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b031690811561077c576001600160a01b031691821561072c5760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b6001600160a01b03169081156108f9576001600160a01b03169182156108a85781600052600060205260406000205481811061085457817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9260209285600052600084520360406000205584600052600082526040600020818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fdfea2646970667358221220f9e659e3b5282399b389d14670399723d7e3ac0679984127165f35ec4141044e64736f6c634300081a0033";

type ERC20MockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20MockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Mock__factory extends ContractFactory {
  constructor(...args: ERC20MockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name: string,
    symbol: string,
    supply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(name, symbol, supply, overrides || {});
  }
  override deploy(
    name: string,
    symbol: string,
    supply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(name, symbol, supply, overrides || {}) as Promise<
      ERC20Mock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC20Mock__factory {
    return super.connect(runner) as ERC20Mock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20MockInterface {
    return new Interface(_abi) as ERC20MockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ERC20Mock {
    return new Contract(address, _abi, runner) as unknown as ERC20Mock;
  }
}
