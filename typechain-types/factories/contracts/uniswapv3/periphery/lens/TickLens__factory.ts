/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  TickLens,
  TickLensInterface,
} from "../../../../../contracts/uniswapv3/periphery/lens/TickLens";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "int16",
        name: "tickBitmapIndex",
        type: "int16",
      },
    ],
    name: "getPopulatedTicksInWord",
    outputs: [
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "int128",
            name: "liquidityNet",
            type: "int128",
          },
          {
            internalType: "uint128",
            name: "liquidityGross",
            type: "uint128",
          },
        ],
        internalType: "struct ITickLens.PopulatedTick[]",
        name: "populatedTicks",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523460155761044b908161001b8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c63351fb4781461002857600080fd5b34610372576040366003190112610372576004356001600160a01b0381169081900361037257602435918260010b8084036103725763299ce14b60e11b82526004820152602081602481855afa9081156102b657600091610348575b506000805b610100811061032a57506040516334324e9f60e21b8152602081600481875afa9081156102b6576000916102ee575b506100c2826103d3565b946100d060405196876103b1565b828652601f196100df846103d3565b0160005b8181106102c257505060005b6101008110610164578660405180916020820160208352815180915260206040840192019060005b818110610125575050500390f35b91935091602060606001926001600160801b0360408851805160020b845285810151600f0b868501520151166040820152019401910191849392610117565b6001811b8516610177575b6001016100ef565b928262ffffff851660020b8360081b60020b0160020b0260020b936040519163f30dba9360e01b8352856004840152610100836024818b5afa9283156102b657600090819461020d575b506001600160801b0390600194604051986101db8a61037f565b8952600f0b602089015216604087015260001901946101fa868a6103eb565b5261020585896103eb565b50905061016f565b91929350610100823d82116102ae575b8161022b61010093836103b1565b810103126102a7578151906001600160801b03821682036102a75760208301519283600f0b84036102aa5760808101518060060b036102aa5760a08101516001600160a01b038116036102aa5760c081015163ffffffff8116036102aa5760e00151801515036102a75750909291906001600160801b036101c1565b80fd5b5080fd5b3d915061021d565b6040513d6000823e3d90fd5b6020906040516102d18161037f565b600081526000838201526000604082015282828b010152016100e3565b6020813d602011610322575b81610307602093836103b1565b810103126102aa5751908160020b82036102a75750386100b8565b3d91506102fa565b6001811b831661033d575b600101610089565b600190910190610335565b90506020813d602011610377575b81610363602093836103b1565b81010312610372575138610084565b600080fd5b3d9150610356565b6060810190811067ffffffffffffffff82111761039b57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761039b57604052565b67ffffffffffffffff811161039b5760051b60200190565b80518210156103ff5760209160051b010190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220bfc82e670c057909ed0a059bf48b01fbd08e70c790dba4a3e5713763a617af2264736f6c634300081a0033";

type TickLensConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TickLensConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TickLens__factory extends ContractFactory {
  constructor(...args: TickLensConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TickLens & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TickLens__factory {
    return super.connect(runner) as TickLens__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TickLensInterface {
    return new Interface(_abi) as TickLensInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TickLens {
    return new Contract(address, _abi, runner) as unknown as TickLens;
  }
}
