/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  TestUniswapV3Callee,
  TestUniswapV3CalleeInterface,
} from "../../../../../contracts/uniswapv3/periphery/test/TestUniswapV3Callee";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount1Out",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint160",
        name: "sqrtPriceLimitX96",
        type: "uint160",
      },
    ],
    name: "swap0ForExact1",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount0Out",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint160",
        name: "sqrtPriceLimitX96",
        type: "uint160",
      },
    ],
    name: "swap1ForExact0",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount0In",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint160",
        name: "sqrtPriceLimitX96",
        type: "uint160",
      },
    ],
    name: "swapExact0For1",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount1In",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint160",
        name: "sqrtPriceLimitX96",
        type: "uint160",
      },
    ],
    name: "swapExact1For0",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "amount0Delta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "amount1Delta",
        type: "int256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "uniswapV3SwapCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061074b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063e2be910911610050578063e2be910914610094578063f603482c146100a7578063fa461e33146100ba57600080fd5b80636dfc0ddb1461006c578063bac7bf7814610081575b600080fd5b61007f61007a3660046104a9565b6100cd565b005b61007f61008f3660046104a9565b61017b565b61007f6100a23660046104a9565b6101ac565b61007f6100b53660046104a9565b6101d4565b61007f6100c83660046104fc565b6101fc565b8373ffffffffffffffffffffffffffffffffffffffff1663128acb088360016100f587610452565b604080513360208201528791016040516020818303038152906040526040518663ffffffff1660e01b815260040161013195949392919061057c565b60408051808303816000875af115801561014f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101739190610629565b505050505050565b8373ffffffffffffffffffffffffffffffffffffffff1663128acb088360016101a387610452565b6100f59061064d565b8373ffffffffffffffffffffffffffffffffffffffff1663128acb088360006100f587610452565b8373ffffffffffffffffffffffffffffffffffffffff1663128acb088360006101a387610452565b600061020a828401846106ac565b9050600085131561032b573373ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610260573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028491906106d0565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301523360248301526044820188905291909116906323b872dd906064016020604051808303816000875af1158015610301573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032591906106ed565b5061044b565b6000841361033b5761033b61070f565b3373ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103aa91906106d0565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301523360248301526044820187905291909116906323b872dd906064016020604051808303816000875af1158015610427573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017391906106ed565b5050505050565b60007f8000000000000000000000000000000000000000000000000000000000000000821061048057600080fd5b5090565b73ffffffffffffffffffffffffffffffffffffffff811681146104a657600080fd5b50565b600080600080608085870312156104bf57600080fd5b84356104ca81610484565b93506020850135925060408501356104e181610484565b915060608501356104f181610484565b939692955090935050565b6000806000806060858703121561051257600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561053857600080fd5b818701915087601f83011261054c57600080fd5b81358181111561055b57600080fd5b88602082850101111561056d57600080fd5b95989497505060200194505050565b600073ffffffffffffffffffffffffffffffffffffffff8088168352602087151581850152866040850152818616606085015260a06080850152845191508160a085015260005b828110156105df5785810182015185820160c0015281016105c3565b828111156105f157600060c084870101525b5050601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160c0019695505050505050565b6000806040838503121561063c57600080fd5b505080516020909101519092909150565b60007f800000000000000000000000000000000000000000000000000000000000000082036106a5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060000390565b6000602082840312156106be57600080fd5b81356106c981610484565b9392505050565b6000602082840312156106e257600080fd5b81516106c981610484565b6000602082840312156106ff57600080fd5b815180151581146106c957600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fdfea164736f6c634300080f000a";

type TestUniswapV3CalleeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestUniswapV3CalleeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestUniswapV3Callee__factory extends ContractFactory {
  constructor(...args: TestUniswapV3CalleeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestUniswapV3Callee & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): TestUniswapV3Callee__factory {
    return super.connect(runner) as TestUniswapV3Callee__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestUniswapV3CalleeInterface {
    return new Interface(_abi) as TestUniswapV3CalleeInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TestUniswapV3Callee {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as TestUniswapV3Callee;
  }
}
