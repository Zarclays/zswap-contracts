/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  TestMulticall,
  TestMulticallInterface,
} from "../../../../../contracts/uniswapv3/periphery/test/TestMulticall";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "functionThatReturnsTuple",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "a",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "b",
            type: "uint256",
          },
        ],
        internalType: "struct TestMulticall.Tuple",
        name: "tuple",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "error",
        type: "string",
      },
    ],
    name: "functionThatRevertsWithError",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "paid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pays",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "returnSender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506107bb806100206000396000f3fe6080604052600436106100655760003560e01c80635170a9d0116100435780635170a9d014610114578063ac9650d81461012f578063f3e222971461014f57600080fd5b8063295b4e171461006a57806334621235146100935780633b16a6a3146100b5575b600080fd5b34801561007657600080fd5b5061008060005481565b6040519081526020015b60405180910390f35b34801561009f57600080fd5b506100b36100ae3660046103e2565b610157565b005b3480156100c157600080fd5b506100f96100d0366004610462565b604080518082018252600080825260209182015281518083019092529181529081019190915290565b6040805182518152602092830151928101929092520161008a565b34801561012057600080fd5b5060405133815260200161008a565b61014261013d366004610484565b610194565b60405161008a9190610573565b6100b3610306565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018b91906105f3565b60405180910390fd5b60608167ffffffffffffffff8111156101af576101af61031e565b6040519080825280602002602001820160405280156101e257816020015b60608152602001906001900390816101cd5790505b50905060005b828110156102ff57600080308686858181106102065761020661060d565b9050602002810190610218919061063c565b6040516102269291906106a8565b600060405180830381855af49150503d8060008114610261576040519150601f19603f3d011682016040523d82523d6000602084013e610266565b606091505b5091509150816102cc5760448151101561027f57600080fd5b6004810190508080602001905181019061029991906106b8565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018b91906105f3565b808484815181106102df576102df61060d565b6020026020010181905250505080806102f79061075e565b9150506101e8565b5092915050565b346000808282546103179190610796565b9091555050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156103945761039461031e565b604052919050565b600067ffffffffffffffff8211156103b6576103b661031e565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6000602082840312156103f457600080fd5b813567ffffffffffffffff81111561040b57600080fd5b8201601f8101841361041c57600080fd5b803561042f61042a8261039c565b61034d565b81815285602083850101111561044457600080fd5b81602084016020830137600091810160200191909152949350505050565b6000806040838503121561047557600080fd5b50508035926020909101359150565b6000806020838503121561049757600080fd5b823567ffffffffffffffff808211156104af57600080fd5b818501915085601f8301126104c357600080fd5b8135818111156104d257600080fd5b8660208260051b85010111156104e757600080fd5b60209290920196919550909350505050565b60005b838110156105145781810151838201526020016104fc565b83811115610523576000848401525b50505050565b600081518084526105418160208601602086016104f9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156105e6577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526105d4858351610529565b9450928501929085019060010161059a565b5092979650505050505050565b6020815260006106066020830184610529565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261067157600080fd5b83018035915067ffffffffffffffff82111561068c57600080fd5b6020019150368190038213156106a157600080fd5b9250929050565b8183823760009101908152919050565b6000602082840312156106ca57600080fd5b815167ffffffffffffffff8111156106e157600080fd5b8201601f810184136106f257600080fd5b805161070061042a8261039c565b81815285602083850101111561071557600080fd5b6107268260208301602086016104f9565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361078f5761078f61072f565b5060010190565b600082198211156107a9576107a961072f565b50019056fea164736f6c634300080f000a";

type TestMulticallConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestMulticallConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestMulticall__factory extends ContractFactory {
  constructor(...args: TestMulticallConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestMulticall & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestMulticall__factory {
    return super.connect(runner) as TestMulticall__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestMulticallInterface {
    return new Interface(_abi) as TestMulticallInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TestMulticall {
    return new Contract(address, _abi, runner) as unknown as TestMulticall;
  }
}
