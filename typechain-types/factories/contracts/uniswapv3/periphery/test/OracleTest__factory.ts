/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  OracleTest,
  OracleTestInterface,
} from "../../../../../contracts/uniswapv3/periphery/test/OracleTest";

const _abi = [
  {
    inputs: [],
    name: "T",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "secondsAgo",
        type: "uint32",
      },
    ],
    name: "consult",
    outputs: [
      {
        internalType: "int24",
        name: "arithmeticMeanTick",
        type: "int24",
      },
      {
        internalType: "uint128",
        name: "harmonicMeanLiquidity",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    name: "getBlockStartingTickAndLiquidity",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "int24[]",
        name: "ticks",
        type: "int24[]",
      },
    ],
    name: "getChainedPrice",
    outputs: [
      {
        internalType: "int256",
        name: "syntheticTick",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "period",
        type: "uint32",
      },
    ],
    name: "getGasCostOfConsult",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "uint128",
        name: "baseAmount",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "baseToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "quoteToken",
        type: "address",
      },
    ],
    name: "getGasCostOfGetQuoteAtTick",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    name: "getOldestObservationSecondsAgo",
    outputs: [
      {
        internalType: "uint32",
        name: "secondsAgo",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "currentTimestamp",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "uint128",
        name: "baseAmount",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "baseToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "quoteToken",
        type: "address",
      },
    ],
    name: "getQuoteAtTick",
    outputs: [
      {
        internalType: "uint256",
        name: "quoteAmount",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "weight",
            type: "uint128",
          },
        ],
        internalType: "struct OracleLibrary.WeightedTickData[]",
        name: "observations",
        type: "tuple[]",
      },
    ],
    name: "getWeightedArithmeticMeanTick",
    outputs: [
      {
        internalType: "int24",
        name: "arithmeticMeanWeightedTick",
        type: "int24",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50612035806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063824134891161005b5780638241348914610117578063ab34b0fc1461012a578063bbe8f41914610150578063e6c4fbe01461016357600080fd5b8063333b19a81461008d57806343c57a27146100d05780636a816ff9146100f15780637059b38a14610104575b600080fd5b6100a061009b3660046113f5565b610193565b6040805160029390930b83526fffffffffffffffffffffffffffffffff9091166020830152015b60405180910390f35b6100e36100de36600461143f565b6101a8565b6040519081526020016100c7565b6100e36100ff36600461143f565b6101bf565b6100e36101123660046115da565b6101e7565b6100a06101253660046116ae565b6101fa565b61013d6101383660046116e7565b610212565b60405160029190910b81526020016100c7565b6100e361015e3660046116ae565b610223565b6101766101713660046113f5565b610248565b6040805163ffffffff9384168152929091166020830152016100c7565b60008061019f8361025d565b91509150915091565b60006101b685858585610630565b95945050505050565b6000805a90506101d186868686610630565b505a6101dd90826117df565b9695505050505050565b60006101f3838361080a565b9392505050565b6000806102078484610989565b915091509250929050565b600061021d82610c4d565b92915050565b6000805a90506102338484610989565b50505a61024090826117df565b949350505050565b60008061025483610d52565b93429350915050565b60008060008060008573ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa1580156102b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d4919061181d565b5050509350935093505060018161ffff1611610351576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f4e454f000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6040517f252c09d700000000000000000000000000000000000000000000000000000000815261ffff831660048201526000908190819073ffffffffffffffffffffffffffffffffffffffff8a169063252c09d790602401608060405180830381865afa1580156103c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ea91906118c2565b509250925092504263ffffffff168363ffffffff161461048357858973ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b8152600401602060405180830381865afa158015610450573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610474919061191a565b97509750505050505050915091565b60008461ffff1660018661ffff168861ffff166104a09190611937565b6104aa91906117df565b6104b4919061197e565b90506000806000808d73ffffffffffffffffffffffffffffffffffffffff1663252c09d7866040518263ffffffff1660e01b81526004016104f791815260200190565b608060405180830381865afa158015610514573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053891906118c2565b9350935093509350806105a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f4f4e4900000000000000000000000000000000000000000000000000000000006044820152606401610348565b60006105b3858a611992565b905063ffffffff81166105c6858a6119b7565b6105d09190611a1f565b9b50600060206105e0858a611a93565b73ffffffffffffffffffffffffffffffffffffffff90811690911b9061060c9063ffffffff8516611ac0565b6106169190611b00565b90508c819e509e5050505050505050505050505050915091565b60008061063c86610f99565b90506fffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff82161161073b57600061068d73ffffffffffffffffffffffffffffffffffffffff831680611b37565b90508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16106106fd576106f87801000000000000000000000000000000000000000000000000876fffffffffffffffffffffffffffffffff1683611300565b610733565b61073381876fffffffffffffffffffffffffffffffff167801000000000000000000000000000000000000000000000000611300565b925050610801565b600061076773ffffffffffffffffffffffffffffffffffffffff83168068010000000000000000611300565b90508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16106107cf576107ca700100000000000000000000000000000000876fffffffffffffffffffffffffffffffff1683611300565b6107fd565b6107fd81876fffffffffffffffffffffffffffffffff16700100000000000000000000000000000000611300565b9250505b50949350505050565b600081516001845161081c91906117df565b14610883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f444c0000000000000000000000000000000000000000000000000000000000006044820152606401610348565b60015b82518111610982578381815181106108a0576108a0611b74565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16846001836108cc91906117df565b815181106108dc576108dc611b74565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1610610939578261090b6001836117df565b8151811061091b5761091b611b74565b602002602001015160020b826109319190611ba3565b91508161096f565b826109456001836117df565b8151811061095557610955611b74565b602002602001015160020b8261096b9190611c17565b9150815b508061097a81611c8b565b915050610886565b5092915050565b6000808263ffffffff166000036109fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f42500000000000000000000000000000000000000000000000000000000000006044820152606401610348565b6040805160028082526060820183526000926020830190803683370190505090508381600081518110610a3157610a31611b74565b602002602001019063ffffffff16908163ffffffff1681525050600081600181518110610a6057610a60611b74565b602002602001019063ffffffff16908163ffffffff16815250506000808673ffffffffffffffffffffffffffffffffffffffff1663883bdbfd846040518263ffffffff1660e01b8152600401610ab69190611cc3565b600060405180830381865afa158015610ad3573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610b199190810190611d71565b91509150600082600081518110610b3257610b32611b74565b602002602001015183600181518110610b4d57610b4d611b74565b6020026020010151610b5f91906119b7565b9050600082600081518110610b7657610b76611b74565b602002602001015183600181518110610b9157610b91611b74565b6020026020010151610ba39190611a93565b9050610bb563ffffffff891683611a1f565b965060008260060b128015610bdb5750610bd563ffffffff891683611e2a565b60060b15155b15610bee5786610bea81611e4c565b9750505b6000610c1473ffffffffffffffffffffffffffffffffffffffff63ffffffff8b16611ac0565b9050610c3e77ffffffffffffffffffffffffffffffffffffffff00000000602084901b1682611b00565b96505050505050509250929050565b6000806000805b8451811015610d1357848181518110610c6f57610c6f611b74565b6020026020010151602001516fffffffffffffffffffffffffffffffff16858281518110610c9f57610c9f611b74565b60200260200101516000015160020b610cb89190611ea9565b610cc29084611c17565b9250848181518110610cd657610cd6611b74565b6020026020010151602001516fffffffffffffffffffffffffffffffff1682610cff9190611937565b915080610d0b81611c8b565b915050610c54565b50610d1e8183611f65565b9250600082128015610d385750610d358183611fcd565b15155b15610d4b5782610d4781611e4c565b9350505b5050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa158015610da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc6919061181d565b50505093509350505060008161ffff1611610e3d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f4e490000000000000000000000000000000000000000000000000000000000006044820152606401610348565b60008073ffffffffffffffffffffffffffffffffffffffff861663252c09d784610e68876001611fe1565b610e729190612007565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815261ffff9091166004820152602401608060405180830381865afa158015610ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eed91906118c2565b93505050915080610f8e576040517f252c09d70000000000000000000000000000000000000000000000000000000081526000600482015273ffffffffffffffffffffffffffffffffffffffff87169063252c09d790602401608060405180830381865afa158015610f63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8791906118c2565b5091935050505b504203949350505050565b60008060008360020b12610fb0578260020b610fb8565b8260020b6000035b9050620d89e8811115610ff7576040517f2bc80f3a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160011660000361101b5770010000000000000000000000000000000061102d565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615611061576ffff97272373d413259a46990580e213a0260801c5b6004821615611080576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b600882161561109f576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156110be576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156110dd576fff973b41fa98c081472e6896dfb254c00260801c5b60408216156110fc576fff2ea16466c96a3843ec78b326b528610260801c5b608082161561111b576ffe5dee046a99a2a811c461f1969c30530260801c5b61010082161561113b576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b61020082161561115b576ff987a7253ac413176f2b074cf7815e540260801c5b61040082161561117b576ff3392b0822b70005940c7a398e4b70f30260801c5b61080082161561119b576fe7159475a2c29b7443b29c7fa6e889d90260801c5b6110008216156111bb576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156111db576fa9f746462d870fdf8a65dc1f90e061e50260801c5b6140008216156111fb576f70d869a156d2a1b890bb3df62baf32f70260801c5b61800082161561121b576f31be135f97d08fd981231505542fcfa60260801c5b6201000082161561123c576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b6202000082161561125c576e5d6af8dedb81196699c329225ee6040260801c5b6204000082161561127b576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611298576b048a170391f7dc42444e8fa20260801c5b60008460020b13156112d757807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff816112d3576112d361194f565b0490505b6401000000008106156112eb5760016112ee565b60005b60ff16602082901c0192505050919050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85870985870292508281108382030391505080600003611357576000841161134c57600080fd5b5082900490506101f3565b80841161136357600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b73ffffffffffffffffffffffffffffffffffffffff811681146113f257600080fd5b50565b60006020828403121561140757600080fd5b81356101f3816113d0565b8060020b81146113f257600080fd5b6fffffffffffffffffffffffffffffffff811681146113f257600080fd5b6000806000806080858703121561145557600080fd5b843561146081611412565b9350602085013561147081611421565b92506040850135611480816113d0565b91506060850135611490816113d0565b939692955090935050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156114ed576114ed61149b565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561153a5761153a61149b565b604052919050565b600067ffffffffffffffff82111561155c5761155c61149b565b5060051b60200190565b600082601f83011261157757600080fd5b8135602061158c61158783611542565b6114f3565b82815260059290921b840181019181810190868411156115ab57600080fd5b8286015b848110156115cf5780356115c281611412565b83529183019183016115af565b509695505050505050565b600080604083850312156115ed57600080fd5b823567ffffffffffffffff8082111561160557600080fd5b818501915085601f83011261161957600080fd5b8135602061162961158783611542565b82815260059290921b8401810191818101908984111561164857600080fd5b948201945b8386101561166f578535611660816113d0565b8252948201949082019061164d565b9650508601359250508082111561168557600080fd5b5061169285828601611566565b9150509250929050565b63ffffffff811681146113f257600080fd5b600080604083850312156116c157600080fd5b82356116cc816113d0565b915060208301356116dc8161169c565b809150509250929050565b600060208083850312156116fa57600080fd5b823567ffffffffffffffff81111561171157600080fd5b8301601f8101851361172257600080fd5b803561173061158782611542565b81815260069190911b8201830190838101908783111561174f57600080fd5b928401925b828410156117a5576040848903121561176d5760008081fd5b6117756114ca565b843561178081611412565b81528486013561178f81611421565b8187015282526040939093019290840190611754565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156117f1576117f16117b0565b500390565b805161ffff8116811461180857600080fd5b919050565b8051801515811461180857600080fd5b600080600080600080600060e0888a03121561183857600080fd5b8751611843816113d0565b602089015190975061185481611412565b9550611862604089016117f6565b9450611870606089016117f6565b935061187e608089016117f6565b925060a088015160ff8116811461189457600080fd5b91506118a260c0890161180d565b905092959891949750929550565b8051600681900b811461180857600080fd5b600080600080608085870312156118d857600080fd5b84516118e38161169c565b93506118f1602086016118b0565b92506040850151611901816113d0565b915061190f6060860161180d565b905092959194509250565b60006020828403121561192c57600080fd5b81516101f381611421565b6000821982111561194a5761194a6117b0565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261198d5761198d61194f565b500690565b600063ffffffff838116908316818110156119af576119af6117b0565b039392505050565b60008160060b8360060b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffff80000000000000018312811516156119fa576119fa6117b0565b81667fffffffffffff018313811615611a1557611a156117b0565b5090039392505050565b60008160060b8360060b80611a3657611a3661194f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81147fffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000083141615611a8a57611a8a6117b0565b90059392505050565b600073ffffffffffffffffffffffffffffffffffffffff838116908316818110156119af576119af6117b0565b600077ffffffffffffffffffffffffffffffffffffffffffffffff80831681851681830481118215151615611af757611af76117b0565b02949350505050565b600077ffffffffffffffffffffffffffffffffffffffffffffffff80841680611b2b57611b2b61194f565b92169190910492915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611b6f57611b6f6117b0565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615611bdd57611bdd6117b0565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615611c1157611c116117b0565b50500390565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615611c5157611c516117b0565b827f8000000000000000000000000000000000000000000000000000000000000000038412811615611c8557611c856117b0565b50500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611cbc57611cbc6117b0565b5060010190565b6020808252825182820181905260009190848201906040850190845b81811015611d0157835163ffffffff1683529284019291840191600101611cdf565b50909695505050505050565b600082601f830112611d1e57600080fd5b81516020611d2e61158783611542565b82815260059290921b84018101918181019086841115611d4d57600080fd5b8286015b848110156115cf578051611d64816113d0565b8352918301918301611d51565b60008060408385031215611d8457600080fd5b825167ffffffffffffffff80821115611d9c57600080fd5b818501915085601f830112611db057600080fd5b81516020611dc061158783611542565b82815260059290921b84018101918181019089841115611ddf57600080fd5b948201945b83861015611e0457611df5866118b0565b82529482019490820190611de4565b91880151919650909350505080821115611e1d57600080fd5b5061169285828601611d0d565b60008260060b80611e3d57611e3d61194f565b808360060b0791505092915050565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008103611e8157611e816117b0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600084136000841385830485118282161615611eea57611eea6117b0565b7f80000000000000000000000000000000000000000000000000000000000000006000871286820588128184161615611f2557611f256117b0565b60008712925087820587128484161615611f4157611f416117b0565b87850587128184161615611f5757611f576117b0565b505050929093029392505050565b600082611f7457611f7461194f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f800000000000000000000000000000000000000000000000000000000000000083141615611fc857611fc86117b0565b500590565b600082611fdc57611fdc61194f565b500790565b600061ffff808316818516808303821115611ffe57611ffe6117b0565b01949350505050565b600061ffff8084168061201c5761201c61194f565b9216919091069291505056fea164736f6c634300080f000a";

type OracleTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OracleTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OracleTest__factory extends ContractFactory {
  constructor(...args: OracleTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      OracleTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): OracleTest__factory {
    return super.connect(runner) as OracleTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleTestInterface {
    return new Interface(_abi) as OracleTestInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): OracleTest {
    return new Contract(address, _abi, runner) as unknown as OracleTest;
  }
}
