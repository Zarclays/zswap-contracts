/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  MockObservations,
  MockObservationsInterface,
} from "../../../../../contracts/uniswapv3/periphery/test/MockObservations";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32[4]",
        name: "_blockTimestamps",
        type: "uint32[4]",
      },
      {
        internalType: "int56[4]",
        name: "_tickCumulatives",
        type: "int56[4]",
      },
      {
        internalType: "uint128[4]",
        name: "_secondsPerLiquidityCumulativeX128s",
        type: "uint128[4]",
      },
      {
        internalType: "bool[4]",
        name: "_initializeds",
        type: "bool[4]",
      },
      {
        internalType: "int24",
        name: "_tick",
        type: "int24",
      },
      {
        internalType: "uint16",
        name: "_observationCardinality",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "_observationIndex",
        type: "uint16",
      },
      {
        internalType: "bool",
        name: "_lastObservationCurrentTimestamp",
        type: "bool",
      },
      {
        internalType: "uint128",
        name: "_liquidity",
        type: "uint128",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "liquidity",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "observations",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
      {
        internalType: "int56",
        name: "",
        type: "int56",
      },
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "slot0",
    outputs: [
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516107ec3803806107ec83398101604081905261002f91610388565b60005b60048110156101795760405180608001604052808b836004811061005857610058610488565b602002015163ffffffff1681526020018a836004811061007a5761007a610488565b602002015160060b815260200189836004811061009957610099610488565b60200201516001600160801b03166001600160a01b031681526020018883600481106100c7576100c7610488565b602002015115159052600082600481106100e3576100e3610488565b825191018054602084015160408501516060909501511515600160f81b026001600160f81b036001600160a01b039096166b01000000000000000000000002959095166001600160581b0366ffffffffffffff909216640100000000026001600160581b031990931663ffffffff90951694909417919091171691909117919091179055806101718161049e565b915050610032565b50600480546001600160801b0390921667010000000000000002600160381b600160b81b0319931515600160b81b0260ff60b81b1961ffff96871665010000000000021661ffff60281b60ff60b81b01199690971663010000000264ffffffffff1990941662ffffff909816979097179290921793909316939093179390931792909216179055506104c592505050565b604051608081016001600160401b038111828210171561023a57634e487b7160e01b600052604160045260246000fd5b60405290565b600082601f83011261025157600080fd5b61025961020a565b80608084018581111561026b57600080fd5b845b818110156102955780518060060b81146102875760008081fd5b84526020938401930161026d565b509095945050505050565b80516001600160801b03811681146102b757600080fd5b919050565b600082601f8301126102cd57600080fd5b6102d561020a565b8060808401858111156102e757600080fd5b845b81811015610295576102fa816102a0565b8452602093840193016102e9565b805180151581146102b757600080fd5b600082601f83011261032957600080fd5b61033161020a565b80608084018581111561034357600080fd5b845b818110156102955761035681610308565b845260209384019301610345565b8051600281900b81146102b757600080fd5b805161ffff811681146102b757600080fd5b60008060008060008060008060006102a08a8c0312156103a757600080fd5b8a601f8b01126103b657600080fd5b6103be61020a565b8060808c018d8111156103d057600080fd5b8c5b818110156103fd57805163ffffffff811681146103ef5760008081fd5b8452602093840193016103d2565b50819b5061040b8e82610240565b9a5050505061041e8b6101008c016102bc565b965061042e8b6101808c01610318565b955061043d6102008b01610364565b945061044c6102208b01610376565b935061045b6102408b01610376565b925061046a6102608b01610308565b91506104796102808b016102a0565b90509295985092959850929598565b634e487b7160e01b600052603260045260246000fd5b6000600182016104be57634e487b7160e01b600052601160045260246000fd5b5060010190565b610318806104d46000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631a68650214610046578063252c09d7146100935780633850c7bd146100ed575b600080fd5b60045461006d9067010000000000000090046fffffffffffffffffffffffffffffffff1681565b6040516fffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100a66100a1366004610277565b610146565b6040805163ffffffff909516855260069390930b602085015273ffffffffffffffffffffffffffffffffffffffff909116918301919091521515606082015260800161008a565b600454604080516000808252600284900b602083015261ffff650100000000008504811693830193909352630100000090930490911660608201526080810182905260a0810182905260c081019190915260e00161008a565b600080600080600080866004811061016057610160610290565b60408051608081018252929091015463ffffffff81168352640100000000810460060b602084015273ffffffffffffffffffffffffffffffffffffffff6b0100000000000000000000008204169183019190915260ff7f0100000000000000000000000000000000000000000000000000000000000000909104811615156060830152600454919250770100000000000000000000000000000000000000000000009091041615610256578051600480546000916501000000000090910461ffff1690811061023157610231610290565b0154610243919063ffffffff166102bf565b61024d90426102bf565b63ffffffff1681525b80516020820151604083015160609093015191989097509195509350915050565b60006020828403121561028957600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600063ffffffff83811690831681811015610303577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b03939250505056fea164736f6c634300080f000a";

type MockObservationsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockObservationsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockObservations__factory extends ContractFactory {
  constructor(...args: MockObservationsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _blockTimestamps: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    _tickCumulatives: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    _secondsPerLiquidityCumulativeX128s: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    _initializeds: [boolean, boolean, boolean, boolean],
    _tick: BigNumberish,
    _observationCardinality: BigNumberish,
    _observationIndex: BigNumberish,
    _lastObservationCurrentTimestamp: boolean,
    _liquidity: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _blockTimestamps,
      _tickCumulatives,
      _secondsPerLiquidityCumulativeX128s,
      _initializeds,
      _tick,
      _observationCardinality,
      _observationIndex,
      _lastObservationCurrentTimestamp,
      _liquidity,
      overrides || {}
    );
  }
  override deploy(
    _blockTimestamps: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    _tickCumulatives: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    _secondsPerLiquidityCumulativeX128s: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    _initializeds: [boolean, boolean, boolean, boolean],
    _tick: BigNumberish,
    _observationCardinality: BigNumberish,
    _observationIndex: BigNumberish,
    _lastObservationCurrentTimestamp: boolean,
    _liquidity: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _blockTimestamps,
      _tickCumulatives,
      _secondsPerLiquidityCumulativeX128s,
      _initializeds,
      _tick,
      _observationCardinality,
      _observationIndex,
      _lastObservationCurrentTimestamp,
      _liquidity,
      overrides || {}
    ) as Promise<
      MockObservations & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockObservations__factory {
    return super.connect(runner) as MockObservations__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockObservationsInterface {
    return new Interface(_abi) as MockObservationsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockObservations {
    return new Contract(address, _abi, runner) as unknown as MockObservations;
  }
}
