/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  MockObservable,
  MockObservableInterface,
} from "../../../../../contracts/uniswapv3/periphery/test/MockObservable";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "secondsAgos",
        type: "uint32[]",
      },
      {
        internalType: "int56[]",
        name: "tickCumulatives",
        type: "int56[]",
      },
      {
        internalType: "uint160[]",
        name: "secondsPerLiquidityCumulativeX128s",
        type: "uint160[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "secondsAgos",
        type: "uint32[]",
      },
    ],
    name: "observe",
    outputs: [
      {
        internalType: "int56[]",
        name: "tickCumulatives",
        type: "int56[]",
      },
      {
        internalType: "uint160[]",
        name: "secondsPerLiquidityCumulativeX128s",
        type: "uint160[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200093c3803806200093c8339810160408190526200003491620003fc565b8251600214801562000047575081516002145b801562000055575080516002145b620000a65760405162461bcd60e51b815260206004820152601660248201527f496e76616c6964207465737420636173652073697a6500000000000000000000604482015260640160405180910390fd5b604051806060016040528084600081518110620000c757620000c7620004fe565b602002602001015163ffffffff16815260200183600081518110620000f057620000f0620004fe565b602002602001015160060b815260200182600081518110620001165762000116620004fe565b6020908102919091018101516001600160a01b03908116909252825160008054928501516040958601519094166b01000000000000000000000002600160581b600160f81b031966ffffffffffffff909516640100000000026001600160581b031990941663ffffffff9093169290921792909217929092169190911790558051606081019091528351819085906001908110620001b857620001b8620004fe565b602002602001015163ffffffff16815260200183600181518110620001e157620001e1620004fe565b602002602001015160060b815260200182600181518110620002075762000207620004fe565b6020908102919091018101516001600160a01b03908116909252825160018054928501516040909501519093166b01000000000000000000000002600160581b600160f81b031966ffffffffffffff909516640100000000026001600160581b031990931663ffffffff9092169190911791909117929092169190911790555062000514915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620002d157620002d162000290565b604052919050565b60006001600160401b03821115620002f557620002f562000290565b5060051b60200190565b600082601f8301126200031157600080fd5b815160206200032a6200032483620002d9565b620002a6565b82815260059290921b840181019181810190868411156200034a57600080fd5b8286015b84811015620003785780518060060b81146200036a5760008081fd5b83529183019183016200034e565b509695505050505050565b600082601f8301126200039557600080fd5b81516020620003a86200032483620002d9565b82815260059290921b84018101918181019086841115620003c857600080fd5b8286015b84811015620003785780516001600160a01b0381168114620003ee5760008081fd5b8352918301918301620003cc565b6000806000606084860312156200041257600080fd5b83516001600160401b03808211156200042a57600080fd5b818601915086601f8301126200043f57600080fd5b81516020620004526200032483620002d9565b82815260059290921b8401810191818101908a8411156200047257600080fd5b948201945b83861015620004a657855163ffffffff81168114620004965760008081fd5b8252948201949082019062000477565b91890151919750909350505080821115620004c057600080fd5b620004ce87838801620002ff565b93506040860151915080821115620004e557600080fd5b50620004f48682870162000383565b9150509250925092565b634e487b7160e01b600052603260045260246000fd5b61041880620005246000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063883bdbfd14610030575b600080fd5b61004361003e3660046102a6565b61005a565b60405161005192919061031b565b60405180910390f35b60008054606091829163ffffffff1690859085908161007b5761007b6103af565b905060200201602081019061009091906103de565b63ffffffff161480156100d957506001805463ffffffff1690859085908181106100bc576100bc6103af565b90506020020160208101906100d191906103de565b63ffffffff16145b610143576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c696420746573742063617365000000000000000000000000000000604482015260640160405180910390fd5b6040805160028082526060820183526000926020830190803683375050600080548351939450640100000000900460060b92849250610184576101846103af565b600692830b602091820292909201015260018054835164010000000090910490920b9183919081106101b8576101b86103af565b60069290920b602092830291909101820152604080516002808252606082018352600093919290918301908036833750506000805483519394506b010000000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1692849250610227576102276103af565b73ffffffffffffffffffffffffffffffffffffffff92831660209182029290920101526001805483516b010000000000000000000000909104909216918391908110610275576102756103af565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015290925090509250929050565b600080602083850312156102b957600080fd5b823567ffffffffffffffff808211156102d157600080fd5b818501915085601f8301126102e557600080fd5b8135818111156102f457600080fd5b8660208260051b850101111561030957600080fd5b60209290920196919550909350505050565b604080825283519082018190526000906020906060840190828701845b8281101561035757815160060b84529284019290840190600101610338565b5050508381038285015284518082528583019183019060005b818110156103a257835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610370565b5090979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156103f057600080fd5b813563ffffffff8116811461040457600080fd5b939250505056fea164736f6c634300080f000a";

type MockObservableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockObservableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockObservable__factory extends ContractFactory {
  constructor(...args: MockObservableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    secondsAgos: BigNumberish[],
    tickCumulatives: BigNumberish[],
    secondsPerLiquidityCumulativeX128s: BigNumberish[],
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      secondsAgos,
      tickCumulatives,
      secondsPerLiquidityCumulativeX128s,
      overrides || {}
    );
  }
  override deploy(
    secondsAgos: BigNumberish[],
    tickCumulatives: BigNumberish[],
    secondsPerLiquidityCumulativeX128s: BigNumberish[],
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      secondsAgos,
      tickCumulatives,
      secondsPerLiquidityCumulativeX128s,
      overrides || {}
    ) as Promise<
      MockObservable & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockObservable__factory {
    return super.connect(runner) as MockObservable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockObservableInterface {
    return new Interface(_abi) as MockObservableInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockObservable {
    return new Contract(address, _abi, runner) as unknown as MockObservable;
  }
}
