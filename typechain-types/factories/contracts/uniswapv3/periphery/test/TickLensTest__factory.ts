/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  TickLensTest,
  TickLensTestInterface,
} from "../../../../../contracts/uniswapv3/periphery/test/TickLensTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "int16",
        name: "tickBitmapIndex",
        type: "int16",
      },
    ],
    name: "getGasCostOfGetPopulatedTicksInWord",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "int16",
        name: "tickBitmapIndex",
        type: "int16",
      },
    ],
    name: "getPopulatedTicksInWord",
    outputs: [
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "int128",
            name: "liquidityNet",
            type: "int128",
          },
          {
            internalType: "uint128",
            name: "liquidityGross",
            type: "uint128",
          },
        ],
        internalType: "struct ITickLens.PopulatedTick[]",
        name: "populatedTicks",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346015576104d0908161001b8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c8063351fb4781461007e5763f0c2e7bc1461003257600080fd5b346100795761004d61004336610100565b9190915a926101c6565b505a810390811161006357602090604051908152f35b634e487b7160e01b600052601160045260246000fd5b600080fd5b346100795761009561008f36610100565b906101c6565b60405180916020820160208352815180915260206040840192019060005b8181106100c1575050500390f35b91935091602060606001926001600160801b0360408851805160020b845285810151600f0b8685015201511660408201520194019101918493926100b3565b6040906003190112610079576004356001600160a01b038116810361007957906024358060010b81036100795790565b6060810190811067ffffffffffffffff82111761014c57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761014c57604052565b67ffffffffffffffff811161014c5760051b60200190565b80518210156101b05760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b60405163299ce14b60e11b8152600183900b60048201529192916001600160a01b0390911690602081602481855afa9081156103d657600091610468575b506000805b610100811061044a57506040516334324e9f60e21b8152602081600481875afa9081156103d65760009161040e575b509061024381610184565b916102516040519384610162565b818352601f1961026083610184565b0160005b8181106103e2575050829660005b61010081106102845750505050505050565b6001811b8616610297575b600101610272565b928262ffffff851660020b8360081b60020b0160020b0260020b936040519163f30dba9360e01b8352856004840152610100836024818c5afa9283156103d657600090819461032d575b506001600160801b0390600194604051986102fb8a610130565b8952600f0b6020890152166040870152600019019461031a868861019c565b52610325858761019c565b50905061028f565b91929350610100823d82116103ce575b8161034b6101009383610162565b810103126103c7578151906001600160801b03821682036103c75760208301519283600f0b84036103ca5760808101518060060b036103ca5760a08101516001600160a01b038116036103ca5760c081015163ffffffff8116036103ca5760e00151801515036103c75750909291906001600160801b036102e1565b80fd5b5080fd5b3d915061033d565b6040513d6000823e3d90fd5b6020906040516103f181610130565b600081526000838201526000604082015282828801015201610264565b6020813d602011610442575b8161042760209383610162565b810103126103ca5751908160020b82036103c7575038610238565b3d915061041a565b6001811b831661045d575b600101610209565b600190910190610455565b90506020813d602011610492575b8161048360209383610162565b81010312610079575138610204565b3d915061047656fea2646970667358221220bc945003f1e1f1a4db50e584580caa8a2e7546a3d74f3adafacc5b0fd45828ac64736f6c634300081a0033";

type TickLensTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TickLensTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TickLensTest__factory extends ContractFactory {
  constructor(...args: TickLensTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TickLensTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TickLensTest__factory {
    return super.connect(runner) as TickLensTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TickLensTestInterface {
    return new Interface(_abi) as TickLensTestInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TickLensTest {
    return new Contract(address, _abi, runner) as unknown as TickLensTest;
  }
}
