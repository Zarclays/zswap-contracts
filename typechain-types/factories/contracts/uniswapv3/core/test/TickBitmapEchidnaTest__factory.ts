/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  TickBitmapEchidnaTest,
  TickBitmapEchidnaTestInterface,
} from "../../../../../contracts/uniswapv3/core/test/TickBitmapEchidnaTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "bool",
        name: "lte",
        type: "bool",
      },
    ],
    name: "checkNextInitializedTickWithinOneWordInvariants",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "flipTick",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610729806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632854ac0a1461003b5780638815912f14610050575b600080fd5b61004e6100493660046105a7565b610063565b005b61004e61005e3660046105e3565b6101ca565b6000806100738185600186610202565b91509150821561011d57627ffeff198460020b121561009157600080fd5b8360020b8260020b13156100a7576100a7610605565b6101006100b48386610631565b60020b126100c4576100c4610605565b835b8260020b8160020b13156100fc576100dd81610344565b156100ea576100ea610605565b806100f481610679565b9150506100c6565b5080151561010983610344565b15151461011857610118610605565b6101c4565b627ffeff8460020b1261012f57600080fd5b8360020b8260020b1361014457610144610605565b6101006101518584610631565b60020b131561016257610162610605565b600061016f85600161069d565b90505b8260020b8160020b12156101a85761018981610344565b1561019657610196610605565b806101a0816106e4565b915050610172565b508015156101b583610344565b1515146101c4576101c4610605565b50505050565b60006101d582610344565b90506101e46000836001610377565b80156101ef83610344565b1515146101fe576101fe610605565b5050565b60008060008460020b8660020b8161021c5761021c610706565b05905060008660020b12801561024957508460020b8660020b8161024257610242610706565b0760020b15155b1561025357600019015b83156102c757600281900b600881901d600181810b600090815260208b9052604090205461010090930760ff81169190911b800160001901928316801515955091929091856102a957888360ff168603026102bc565b886102b3826103f4565b840360ff168603025b96505050505061033a565b600181810160020b600881901d80830b600090815260208b9052604090205461010090920760ff81169390931b60001901199182168015159550909291908561031d57888360ff0360ff16866001010102610333565b8883610328836104a2565b0360ff168660010101025b9650505050505b5094509492505050565b600080806103558185600180610202565b915091508360020b8260020b1461036d57600061036f565b805b949350505050565b8060020b8260020b8161038c5761038c610706565b0760020b1561039a57600080fd5b6000806103c88360020b8560020b816103b5576103b5610706565b0560020b600881901d9161010090910790565b600191820b60009081526020979097526040909620805460ff9097169190911b90951890945550505050565b600080821161040257600080fd5b700100000000000000000000000000000000821061042257608091821c91015b68010000000000000000821061043a57604091821c91015b640100000000821061044e57602091821c91015b62010000821061046057601091821c91015b610100821061047157600891821c91015b6010821061048157600491821c91015b6004821061049157600291821c91015b6002821061049d576001015b919050565b60008082116104b057600080fd5b5060ff6fffffffffffffffffffffffffffffffff8216156104d457607f19016104dc565b608082901c91505b67ffffffffffffffff8216156104f557603f19016104fd565b604082901c91505b63ffffffff82161561051257601f190161051a565b602082901c91505b61ffff82161561052d57600f1901610535565b601082901c91505b60ff821615610547576007190161054f565b600882901c91505b600f8216156105615760031901610569565b600482901c91505b600382161561057b5760011901610583565b600282901c91505b600182161561049d5760001901919050565b8035600281900b811461049d57600080fd5b600080604083850312156105ba57600080fd5b6105c383610595565b9150602083013580151581146105d857600080fd5b809150509250929050565b6000602082840312156105f557600080fd5b6105fe82610595565b9392505050565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008160020b8360020b6000811281627fffff19018312811516156106585761065861061b565b81627fffff01831381161561066f5761066f61061b565b5090039392505050565b60008160020b627fffff198114156106935761069361061b565b6000190192915050565b60008160020b8360020b6000821282627fffff038213811516156106c3576106c361061b565b82627fffff190382128116156106db576106db61061b565b50019392505050565b60008160020b627fffff8114156106fd576106fd61061b565b60010192915050565b634e487b7160e01b600052601260045260246000fdfea164736f6c634300080c000a";

type TickBitmapEchidnaTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TickBitmapEchidnaTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TickBitmapEchidnaTest__factory extends ContractFactory {
  constructor(...args: TickBitmapEchidnaTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TickBitmapEchidnaTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): TickBitmapEchidnaTest__factory {
    return super.connect(runner) as TickBitmapEchidnaTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TickBitmapEchidnaTestInterface {
    return new Interface(_abi) as TickBitmapEchidnaTestInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TickBitmapEchidnaTest {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as TickBitmapEchidnaTest;
  }
}
