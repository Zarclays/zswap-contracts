/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  UnsafeMathEchidnaTest,
  UnsafeMathEchidnaTestInterface,
} from "../../../../../contracts/uniswapv3/core/test/UnsafeMathEchidnaTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "d",
        type: "uint256",
      },
    ],
    name: "checkDivRoundingUp",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610152806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80632724da4e14610030575b600080fd5b61004361003e3660046100aa565b610045565b005b6000811161005257600080fd5b808204818306151501600061006783856100e2565b61007190836100f6565b905061007d838561011b565b61009457801561008f5761008f61012f565b6100a4565b806001146100a4576100a461012f565b50505050565b600080604083850312156100bd57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601260045260246000fd5b6000826100f1576100f16100cc565b500490565b60008282101561011657634e487b7160e01b600052601160045260246000fd5b500390565b60008261012a5761012a6100cc565b500690565b634e487b7160e01b600052600160045260246000fdfea164736f6c634300080c000a";

type UnsafeMathEchidnaTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UnsafeMathEchidnaTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UnsafeMathEchidnaTest__factory extends ContractFactory {
  constructor(...args: UnsafeMathEchidnaTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      UnsafeMathEchidnaTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): UnsafeMathEchidnaTest__factory {
    return super.connect(runner) as UnsafeMathEchidnaTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UnsafeMathEchidnaTestInterface {
    return new Interface(_abi) as UnsafeMathEchidnaTestInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): UnsafeMathEchidnaTest {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as UnsafeMathEchidnaTest;
  }
}
