/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  TickTest,
  TickTestInterface,
} from "../../../../../contracts/uniswapv3/core/test/TickTest";

const _abi = [
  {
    inputs: [],
    name: "LO",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "clear",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "uint256",
        name: "feeGrowthGlobal0X128",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeGrowthGlobal1X128",
        type: "uint256",
      },
      {
        internalType: "uint160",
        name: "secondsPerLiquidityCumulativeX128",
        type: "uint160",
      },
      {
        internalType: "int56",
        name: "tickCumulative",
        type: "int56",
      },
      {
        internalType: "uint32",
        name: "time",
        type: "uint32",
      },
    ],
    name: "cross",
    outputs: [
      {
        internalType: "int128",
        name: "liquidityNet",
        type: "int128",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tickLower",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickUpper",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickCurrent",
        type: "int24",
      },
      {
        internalType: "uint256",
        name: "feeGrowthGlobal0X128",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeGrowthGlobal1X128",
        type: "uint256",
      },
    ],
    name: "getFeeGrowthInside",
    outputs: [
      {
        internalType: "uint256",
        name: "feeGrowthInside0X128",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeGrowthInside1X128",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "liquidityGross",
            type: "uint128",
          },
          {
            internalType: "int128",
            name: "liquidityNet",
            type: "int128",
          },
          {
            internalType: "uint256",
            name: "feeGrowthOutside0X128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthOutside1X128",
            type: "uint256",
          },
          {
            internalType: "int56",
            name: "tickCumulativeOutside",
            type: "int56",
          },
          {
            internalType: "uint160",
            name: "secondsPerLiquidityOutsideX128",
            type: "uint160",
          },
          {
            internalType: "uint32",
            name: "secondsOutside",
            type: "uint32",
          },
          {
            internalType: "bool",
            name: "initialized",
            type: "bool",
          },
        ],
        internalType: "struct Tick.Info",
        name: "info",
        type: "tuple",
      },
    ],
    name: "setTick",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tickSpacing",
        type: "int24",
      },
    ],
    name: "tickSpacingToMaxLiquidityPerTick",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    name: "ticks",
    outputs: [
      {
        internalType: "uint128",
        name: "liquidityGross",
        type: "uint128",
      },
      {
        internalType: "int128",
        name: "liquidityNet",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "feeGrowthOutside0X128",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeGrowthOutside1X128",
        type: "uint256",
      },
      {
        internalType: "int56",
        name: "tickCumulativeOutside",
        type: "int56",
      },
      {
        internalType: "uint160",
        name: "secondsPerLiquidityOutsideX128",
        type: "uint160",
      },
      {
        internalType: "uint32",
        name: "secondsOutside",
        type: "uint32",
      },
      {
        internalType: "bool",
        name: "initialized",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickCurrent",
        type: "int24",
      },
      {
        internalType: "int128",
        name: "liquidityDelta",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "feeGrowthGlobal0X128",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeGrowthGlobal1X128",
        type: "uint256",
      },
      {
        internalType: "uint160",
        name: "secondsPerLiquidityCumulativeX128",
        type: "uint160",
      },
      {
        internalType: "int56",
        name: "tickCumulative",
        type: "int56",
      },
      {
        internalType: "uint32",
        name: "time",
        type: "uint32",
      },
      {
        internalType: "bool",
        name: "upper",
        type: "bool",
      },
      {
        internalType: "uint128",
        name: "maxLiquidity",
        type: "uint128",
      },
    ],
    name: "update",
    outputs: [
      {
        internalType: "bool",
        name: "flipped",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ba5806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806382c66f871161005b57806382c66f87146101c3578063b613524a146101ee578063df33fa8814610227578063f30dba931461034557600080fd5b806320b90da91461008257806330e3ff4c146100aa5780635cb083ce146100d2575b600080fd5b6100956100903660046107df565b61041d565b60405190151581526020015b60405180910390f35b6100bd6100b836600461088b565b610441565b604080519283526020830191909152016100a1565b6101c16100e03660046108e0565b600291820b600090815260208181526040918290208351918401516001600160801b03908116600160801b02921691909117815590820151600182015560608201519281019290925560808101516003909201805460a083015160c084015160e0909401511515600160f81b026001600160f81b0363ffffffff909516600160d81b02949094167affffffffffffffffffffffffffffffffffffffffffffffffffffff6001600160a01b03909216670100000000000000026001600160d81b031990931666ffffffffffffff90961695909517919091171692909217179055565b005b6101d66101d13660046109cb565b610460565b6040516001600160801b0390911681526020016100a1565b6101c16101fc3660046109cb565b600290810b600090815260208190526040812081815560018101829055918201819055600390910155565b6103326102353660046109ed565b600286810b6000908152602081905260408120600181018054890390559182018054870390556003820180546001600160f81b031981167fff00000000ffffffffffffffffffffffffffffffffffffffff000000000000006701000000000000008084046001600160a01b039081168b031602908116919091177fffffffffff0000000000000000000000000000000000000000ffffffffffffff8316821760060b880366ffffffffffffff16908117600160d81b6001600160d81b031990941666ffffffffffffff19909316929092171782900463ffffffff9081168703169091021790559054600160801b9004600f0b979650505050505050565b604051600f9190910b81526020016100a1565b6103c16103533660046109cb565b60006020819052908152604090208054600182015460028301546003909301546001600160801b03831693600160801b909304600f0b9290600681900b9067010000000000000081046001600160a01b031690600160d81b810463ffffffff1690600160f81b900460ff1688565b604080516001600160801b039099168952600f9790970b602089015295870194909452606086019290925260060b60808501526001600160a01b031660a084015263ffffffff1660c0830152151560e0820152610100016100a1565b6000610432818c8c8c8c8c8c8c8c8c8c610471565b9b9a5050505050505050505050565b600080610452818888888888610629565b915091509550959350505050565b600061046b826106d0565b92915050565b60028a900b600090815260208c90526040812080546001600160801b031682600f8c900b81136104aa576104a58c83610a69565b6104bd565b6104b38c610a94565b6104bd9083610abb565b9050846001600160801b0316816001600160801b031611156104f2576040516368d2be8f60e01b815260040160405180910390fd5b6001600160801b0382811615908216158114159450156105a4578c60020b8e60020b1361058c57600183018b9055600283018a905560038301805466ffffffffffffff8a166001600160f81b03199091166701000000000000006001600160a01b038d16027fff00000000ffffffffffffffffffffffffffffffffffffffff00000000000000161717600160d81b63ffffffff8a16021790555b6003830180546001600160f81b0316600160f81b1790555b82546fffffffffffffffffffffffffffffffff19166001600160801b038216178355856105e75782546105e2908d90600160801b9004600f0b610ae3565b6105fe565b82546105fe908d90600160801b9004600f0b610b32565b83546001600160801b03918216600160801b0291161790925550909c9b505050505050505050505050565b600285810b60008181526020899052604080822088850b83529082209193849391929184918291908a900b1261066a5750506001820154600283015461067d565b8360010154880391508360020154870390505b6000808b60020b8b60020b121561069f575050600183015460028401546106b2565b84600101548a0391508460020154890390505b92909803979097039b96909503949094039850939650505050505050565b60008082600281900b620d89e719816106eb576106eb610b82565b05029050600083600281900b620d89e88161070857610708610b82565b0502905060008460020b83830360020b8161072557610725610b82565b0560010190508062ffffff166001600160801b0380168161074857610748610b82565b0495945050505050565b8035600281900b811461076457600080fd5b919050565b8035600f81900b811461076457600080fd5b80356001600160a01b038116811461076457600080fd5b8035600681900b811461076457600080fd5b803563ffffffff8116811461076457600080fd5b8035801515811461076457600080fd5b80356001600160801b038116811461076457600080fd5b6000806000806000806000806000806101408b8d0312156107ff57600080fd5b6108088b610752565b995061081660208c01610752565b985061082460408c01610769565b975060608b0135965060808b0135955061084060a08c0161077b565b945061084e60c08c01610792565b935061085c60e08c016107a4565b925061086b6101008c016107b8565b915061087a6101208c016107c8565b90509295989b9194979a5092959850565b600080600080600060a086880312156108a357600080fd5b6108ac86610752565b94506108ba60208701610752565b93506108c860408701610752565b94979396509394606081013594506080013592915050565b6000808284036101208112156108f557600080fd5b6108fe84610752565b925061010080601f198301121561091457600080fd5b604051915080820182811067ffffffffffffffff8211171561094657634e487b7160e01b600052604160045260246000fd5b604052610955602086016107c8565b825261096360408601610769565b6020830152606085013560408301526080850135606083015261098860a08601610792565b608083015261099960c0860161077b565b60a08301526109aa60e086016107a4565b60c08301526109ba8186016107b8565b60e083015250809150509250929050565b6000602082840312156109dd57600080fd5b6109e682610752565b9392505050565b60008060008060008060c08789031215610a0657600080fd5b610a0f87610752565b95506020870135945060408701359350610a2b6060880161077b565b9250610a3960808801610792565b9150610a4760a088016107a4565b90509295509295509295565b634e487b7160e01b600052601160045260246000fd5b60006001600160801b03808316818516808303821115610a8b57610a8b610a53565b01949350505050565b600081600f0b60016001607f1b0319811415610ab257610ab2610a53565b60000392915050565b60006001600160801b0383811690831681811015610adb57610adb610a53565b039392505050565b600081600f0b83600f0b600082128260016001607f1b0303821381151615610b0d57610b0d610a53565b8260016001607f1b0319038212811615610b2957610b29610a53565b50019392505050565b600081600f0b83600f0b600081128160016001607f1b031901831281151615610b5d57610b5d610a53565b8160016001607f1b03018313811615610b7857610b78610a53565b5090039392505050565b634e487b7160e01b600052601260045260246000fdfea164736f6c634300080c000a";

type TickTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TickTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TickTest__factory extends ContractFactory {
  constructor(...args: TickTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TickTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TickTest__factory {
    return super.connect(runner) as TickTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TickTestInterface {
    return new Interface(_abi) as TickTestInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TickTest {
    return new Contract(address, _abi, runner) as unknown as TickTest;
  }
}
