/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  SwapMathEchidnaTest,
  SwapMathEchidnaTestInterface,
} from "../../../../../contracts/uniswapv3/core/test/SwapMathEchidnaTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtPriceRaw",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtPriceTargetRaw",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "int256",
        name: "amountRemaining",
        type: "int256",
      },
      {
        internalType: "uint24",
        name: "feePips",
        type: "uint24",
      },
    ],
    name: "checkComputeSwapStepInvariants",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a89806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063d7e3056f14610030575b600080fd5b61004361003e366004610954565b610045565b005b6000856001600160a01b03161161005b57600080fd5b6000846001600160a01b03161161007157600080fd5b60008162ffffff161161008357600080fd5b620f42408162ffffff161061009757600080fd5b6000806000806100aa898989898961027a565b9350935093509350806000196100c091906109e2565b8311156100cf576100cf6109f9565b60008612156100f5576100e186610a0f565b8211156100f0576100f06109f9565b61010e565b856101008285610a2c565b111561010e5761010e6109f9565b876001600160a01b0316896001600160a01b03161415610173578215610136576101366109f9565b8115610144576101446109f9565b8015610152576101526109f9565b876001600160a01b0316846001600160a01b031614610173576101736109f9565b876001600160a01b0316846001600160a01b0316146101c95760008612156101b15761019e86610a0f565b82146101ac576101ac6109f9565b6101c9565b856101bc8285610a2c565b146101c9576101c96109f9565b886001600160a01b0316886001600160a01b03161161022b57886001600160a01b0316846001600160a01b03161115610204576102046109f9565b876001600160a01b0316846001600160a01b03161015610226576102266109f9565b61026f565b886001600160a01b0316846001600160a01b0316101561024d5761024d6109f9565b876001600160a01b0316846001600160a01b0316111561026f5761026f6109f9565b505050505050505050565b60008080806001600160a01b03808916908a1610158187128015906102ff5760006102b38989620f42400362ffffff16620f424061046c565b9050826102cc576102c78c8c8c6001610520565b6102d9565b6102d98b8d8c600161059b565b95508581106102ea578a96506102f9565b6102f68c8b8386610664565b96505b50610349565b81610316576103118b8b8b600061059b565b610323565b6103238a8c8b6000610520565b935083886000031061033757899550610349565b6103468b8a8a600003856106b0565b95505b6001600160a01b038a81169087161482156103ac578080156103685750815b61037e57610379878d8c600161059b565b610380565b855b955080801561038d575081155b6103a35761039e878d8c6000610520565b6103a5565b845b94506103f6565b8080156103b65750815b6103cc576103c78c888c6001610520565b6103ce565b855b95508080156103db575081155b6103f1576103ec8c888c600061059b565b6103f3565b845b94505b8115801561040657508860000385115b15610412578860000394505b81801561043157508a6001600160a01b0316876001600160a01b031614155b1561044057858903935061045d565b61045a868962ffffff168a620f42400362ffffff166106fc565b93505b50505095509550955095915050565b6000808060001985870985870292508281108382030391505080600014156104a6576000841161049b57600080fd5b508290049050610519565b8084116104b257600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b6000836001600160a01b0316856001600160a01b03161115610540579293925b8161056d57610568836001600160801b03168686036001600160a01b0316600160601b61046c565b610590565b610590836001600160801b03168686036001600160a01b0316600160601b6106fc565b90505b949350505050565b6000836001600160a01b0316856001600160a01b031611156105bb579293925b7bffffffffffffffffffffffffffffffff000000000000000000000000606084901b166001600160a01b0386860381169087166105f757600080fd5b8361062d57866001600160a01b031661061a8383896001600160a01b031661046c565b8161062757610627610a44565b04610659565b6106596106448383896001600160a01b03166106fc565b886001600160a01b0316808204910615150190565b979650505050505050565b600080856001600160a01b03161161067b57600080fd5b6000846001600160801b03161161069157600080fd5b816106a357610568858585600161073c565b6105908585856001610822565b600080856001600160a01b0316116106c757600080fd5b6000846001600160801b0316116106dd57600080fd5b816106ef576105688585856000610822565b610590858585600061073c565b600061070984848461046c565b90506000828061071b5761071b610a44565b848609111561051957600019811061073257600080fd5b6001019392505050565b600081156107ae5760006001600160a01b038411156107725761076d84600160601b876001600160801b031661046c565b610789565b6107896001600160801b038616606086901b610a5a565b90506107a66107a1826001600160a01b038916610a2c565b610922565b915050610593565b60006001600160a01b038411156107dc576107d784600160601b876001600160801b03166106fc565b6107f9565b6107f9606085901b6001600160801b038716808204910615150190565b905080866001600160a01b03161161081057600080fd5b6001600160a01b038616039050610593565b600082610830575083610593565b7bffffffffffffffffffffffffffffffff000000000000000000000000606085901b1682156108d5576001600160a01b0386168481029085828161087657610876610a44565b0414156108a7578181018281106108a55761089b83896001600160a01b0316836106fc565b9350505050610593565b505b506107a681856108c06001600160a01b038a1683610a5a565b6108ca9190610a2c565b808204910615150190565b6001600160a01b038616848102908582816108f2576108f2610a44565b041480156108ff57508082115b61090857600080fd5b80820361089b6107a1846001600160a01b038b16846106fc565b806001600160a01b038116811461093857600080fd5b919050565b80356001600160a01b038116811461093857600080fd5b600080600080600060a0868803121561096c57600080fd5b6109758661093d565b94506109836020870161093d565b935060408601356001600160801b038116811461099f57600080fd5b925060608601359150608086013562ffffff811681146109be57600080fd5b809150509295509295909350565b634e487b7160e01b600052601160045260246000fd5b6000828210156109f4576109f46109cc565b500390565b634e487b7160e01b600052600160045260246000fd5b6000600160ff1b821415610a2557610a256109cc565b5060000390565b60008219821115610a3f57610a3f6109cc565b500190565b634e487b7160e01b600052601260045260246000fd5b600082610a7757634e487b7160e01b600052601260045260246000fd5b50049056fea164736f6c634300080c000a";

type SwapMathEchidnaTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapMathEchidnaTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapMathEchidnaTest__factory extends ContractFactory {
  constructor(...args: SwapMathEchidnaTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SwapMathEchidnaTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): SwapMathEchidnaTest__factory {
    return super.connect(runner) as SwapMathEchidnaTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapMathEchidnaTestInterface {
    return new Interface(_abi) as SwapMathEchidnaTestInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SwapMathEchidnaTest {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as SwapMathEchidnaTest;
  }
}
