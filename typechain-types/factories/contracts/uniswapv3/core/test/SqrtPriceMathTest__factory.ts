/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  SqrtPriceMathTest,
  SqrtPriceMathTestInterface,
} from "../../../../../contracts/uniswapv3/core/test/SqrtPriceMathTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtLower",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtUpper",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "bool",
        name: "roundUp",
        type: "bool",
      },
    ],
    name: "getAmount0Delta",
    outputs: [
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtLower",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtUpper",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "bool",
        name: "roundUp",
        type: "bool",
      },
    ],
    name: "getAmount1Delta",
    outputs: [
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtLower",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtUpper",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "bool",
        name: "roundUp",
        type: "bool",
      },
    ],
    name: "getGasCostOfGetAmount0Delta",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtLower",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtUpper",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "bool",
        name: "roundUp",
        type: "bool",
      },
    ],
    name: "getGasCostOfGetAmount1Delta",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtP",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "zeroForOne",
        type: "bool",
      },
    ],
    name: "getGasCostOfGetNextSqrtPriceFromInput",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtP",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "zeroForOne",
        type: "bool",
      },
    ],
    name: "getGasCostOfGetNextSqrtPriceFromOutput",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtP",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "zeroForOne",
        type: "bool",
      },
    ],
    name: "getNextSqrtPriceFromInput",
    outputs: [
      {
        internalType: "uint160",
        name: "sqrtQ",
        type: "uint160",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtP",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "zeroForOne",
        type: "bool",
      },
    ],
    name: "getNextSqrtPriceFromOutput",
    outputs: [
      {
        internalType: "uint160",
        name: "sqrtQ",
        type: "uint160",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610811806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063af955e3b1161005b578063af955e3b14610104578063d7cdaf7114610117578063e20f7ac01461012a578063fedf2b5f1461013d57600080fd5b8063034d21e41461008d5780632c32d4b6146100b357806348a0c5bd146100c6578063aa58276a146100d9575b600080fd5b6100a061009b3660046106f1565b610150565b6040519081526020015b60405180910390f35b6100a06100c136600461073e565b61017a565b6100a06100d436600461073e565b610191565b6100ec6100e73660046106f1565b61019f565b6040516001600160a01b0390911681526020016100aa565b6100a061011236600461073e565b6101ad565b6100a061012536600461073e565b6101bf565b6100a06101383660046106f1565b6101d1565b6100ec61014b3660046106f1565b6101e3565b6000805a9050610162868686866101f1565b505a61016e908261079d565b9150505b949350505050565b600061018885858585610242565b95945050505050565b60006101888585858561030b565b6000610188858585856101f1565b6000805a90506101628686868661030b565b6000805a905061016286868686610242565b6000805a905061016286868686610376565b600061018885858585610376565b600080856001600160a01b03161161020857600080fd5b6000846001600160801b03161161021e57600080fd5b816102355761023085858560016103be565b610188565b61018885858560016104a4565b6000836001600160a01b0316856001600160a01b03161115610262579293925b7bffffffffffffffffffffffffffffffff000000000000000000000000606084901b166001600160a01b03868603811690871661029e57600080fd5b836102d457866001600160a01b03166102c18383896001600160a01b03166105a4565b816102ce576102ce6107b4565b04610300565b6103006102eb8383896001600160a01b0316610658565b886001600160a01b0316808204910615150190565b979650505050505050565b6000836001600160a01b0316856001600160a01b0316111561032b579293925b8161035357610230836001600160801b03168686036001600160a01b0316600160601b6105a4565b610188836001600160801b03168686036001600160a01b0316600160601b610658565b600080856001600160a01b03161161038d57600080fd5b6000846001600160801b0316116103a357600080fd5b816103b55761023085858560006104a4565b61018885858560005b600081156104305760006001600160a01b038411156103f4576103ef84600160601b876001600160801b03166105a4565b61040b565b61040b6001600160801b038616606086901b6107ca565b9050610428610423826001600160a01b0389166107ec565b610698565b915050610172565b60006001600160a01b0384111561045e5761045984600160601b876001600160801b0316610658565b61047b565b61047b606085901b6001600160801b038716808204910615150190565b905080866001600160a01b03161161049257600080fd5b6001600160a01b038616039050610172565b6000826104b2575083610172565b7bffffffffffffffffffffffffffffffff000000000000000000000000606085901b168215610557576001600160a01b038616848102908582816104f8576104f86107b4565b041415610529578181018281106105275761051d83896001600160a01b031683610658565b9350505050610172565b505b5061042881856105426001600160a01b038a16836107ca565b61054c91906107ec565b808204910615150190565b6001600160a01b03861684810290858281610574576105746107b4565b0414801561058157508082115b61058a57600080fd5b80820361051d610423846001600160a01b038b1684610658565b6000808060001985870985870292508281108382030391505080600014156105de57600084116105d357600080fd5b508290049050610651565b8084116105ea57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b60006106658484846105a4565b905060008280610677576106776107b4565b848609111561065157600019811061068e57600080fd5b6001019392505050565b806001600160a01b03811681146106ae57600080fd5b919050565b80356001600160a01b03811681146106ae57600080fd5b80356001600160801b03811681146106ae57600080fd5b803580151581146106ae57600080fd5b6000806000806080858703121561070757600080fd5b610710856106b3565b935061071e602086016106ca565b925060408501359150610733606086016106e1565b905092959194509250565b6000806000806080858703121561075457600080fd5b61075d856106b3565b935061076b602086016106b3565b9250610779604086016106ca565b9150610733606086016106e1565b634e487b7160e01b600052601160045260246000fd5b6000828210156107af576107af610787565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826107e757634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156107ff576107ff610787565b50019056fea164736f6c634300080c000a";

type SqrtPriceMathTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SqrtPriceMathTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SqrtPriceMathTest__factory extends ContractFactory {
  constructor(...args: SqrtPriceMathTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SqrtPriceMathTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SqrtPriceMathTest__factory {
    return super.connect(runner) as SqrtPriceMathTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SqrtPriceMathTestInterface {
    return new Interface(_abi) as SqrtPriceMathTestInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SqrtPriceMathTest {
    return new Contract(address, _abi, runner) as unknown as SqrtPriceMathTest;
  }
}
