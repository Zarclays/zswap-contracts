/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  TickEchidnaTest,
  TickEchidnaTestInterface,
} from "../../../../../contracts/uniswapv3/core/test/TickEchidnaTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "int24",
        name: "tickSpacing",
        type: "int24",
      },
    ],
    name: "checkTickSpacingToParametersInvariants",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610402806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063858027e514610030575b600080fd5b61004361003e3660046101fe565b610045565b005b610052620d89e71961023e565b60020b8160020b131561006457600080fd5b60008160020b1361007457600080fd5b60008161008581620d89e719610277565b61008f91906102b1565b9050600082806100a2620d89e71961023e565b6100ac9190610277565b6100b691906102b1565b905060006100c384610173565b90506100ce8361023e565b60020b8260020b146100e2576100e261033e565b60008260020b136100f5576100f561033e565b836101008484610354565b61010a919061039c565b60020b1561011a5761011a61033e565b6000846101278585610354565b6101319190610277565b61013f9060020b60016103be565b90506fffffffffffffffffffffffffffffffff61015e828483166103d6565b111561016c5761016c61033e565b5050505050565b60008082600281900b620d89e7198161018e5761018e610261565b05029050600083600281900b620d89e8816101ab576101ab610261565b0502905060008460020b83830360020b816101c8576101c8610261565b0560010190508062ffffff166fffffffffffffffffffffffffffffffff8016816101f4576101f4610261565b0495945050505050565b60006020828403121561021057600080fd5b81358060020b811461022157600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b60008160020b627fffff1981141561025857610258610228565b60000392915050565b634e487b7160e01b600052601260045260246000fd5b60008160020b8360020b8061028e5761028e610261565b627fffff198214600019821416156102a8576102a8610228565b90059392505050565b60008160020b8360020b627fffff6000821360008413838304851182821616156102dd576102dd610228565b627fffff1960008512828116878305871216156102fc576102fc610228565b6000871292508582058712848416161561031857610318610228565b8585058712818416161561032e5761032e610228565b5050509290910295945050505050565b634e487b7160e01b600052600160045260246000fd5b60008160020b8360020b6000811281627fffff190183128115161561037b5761037b610228565b81627fffff01831381161561039257610392610228565b5090039392505050565b60008260020b806103af576103af610261565b808360020b0791505092915050565b600082198211156103d1576103d1610228565b500190565b60008160001904831182151516156103f0576103f0610228565b50029056fea164736f6c634300080c000a";

type TickEchidnaTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TickEchidnaTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TickEchidnaTest__factory extends ContractFactory {
  constructor(...args: TickEchidnaTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TickEchidnaTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TickEchidnaTest__factory {
    return super.connect(runner) as TickEchidnaTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TickEchidnaTestInterface {
    return new Interface(_abi) as TickEchidnaTestInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TickEchidnaTest {
    return new Contract(address, _abi, runner) as unknown as TickEchidnaTest;
  }
}
