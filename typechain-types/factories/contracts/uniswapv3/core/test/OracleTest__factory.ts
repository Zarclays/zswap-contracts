/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  OracleTest,
  OracleTestInterface,
} from "../../../../../contracts/uniswapv3/core/test/OracleTest";

const _abi = [
  {
    inputs: [],
    name: "I",
    type: "error",
  },
  {
    inputs: [],
    name: "OLD",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "by",
        type: "uint32",
      },
    ],
    name: "advanceTime",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "advanceTimeBy",
            type: "uint32",
          },
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
        ],
        internalType: "struct OracleTest.UpdateParams[]",
        name: "params",
        type: "tuple[]",
      },
    ],
    name: "batchUpdate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "cardinality",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cardinalityNext",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "secondsAgos",
        type: "uint32[]",
      },
    ],
    name: "getGasCostOfObserve",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_cardinalityNext",
        type: "uint16",
      },
    ],
    name: "grow",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "index",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "time",
            type: "uint32",
          },
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
        ],
        internalType: "struct OracleTest.InitializeParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "liquidity",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "observations",
    outputs: [
      {
        internalType: "uint32",
        name: "blockTimestamp",
        type: "uint32",
      },
      {
        internalType: "int56",
        name: "tickCumulative",
        type: "int56",
      },
      {
        internalType: "uint160",
        name: "secondsPerLiquidityCumulativeX128",
        type: "uint160",
      },
      {
        internalType: "bool",
        name: "initialized",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "secondsAgos",
        type: "uint32[]",
      },
    ],
    name: "observe",
    outputs: [
      {
        internalType: "int56[]",
        name: "tickCumulatives",
        type: "int56[]",
      },
      {
        internalType: "uint160[]",
        name: "secondsPerLiquidityCumulativeX128s",
        type: "uint160[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tick",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "time",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "advanceTimeBy",
            type: "uint32",
          },
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
        ],
        internalType: "struct OracleTest.UpdateParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "update",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506116dc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063761eb23e1161008c578063daf50f6b11610066578063daf50f6b14610267578063dbffe9ad1461027a578063dd158c181461028f578063f7fd2cfa146102a457600080fd5b8063761eb23e14610220578063883bdbfd14610233578063d81740db1461025457600080fd5b80632986c0e5116100c85780632986c0e51461019a5780633eaf5d9f146101c257806365829dc5146101ea57806374e69cef146101ff57600080fd5b806316ada547146100ef5780631a6865021461011a578063252c09d71461014d575b600080fd5b61ffff546101009063ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b61ffff5461013590600160381b90046001600160801b031681565b6040516001600160801b039091168152602001610111565b61016061015b3660046113db565b6102d4565b6040805163ffffffff909516855260069390930b60208501526001600160a01b039091169183019190915215156060820152608001610111565b61ffff80546101af91600160b81b9091041681565b60405161ffff9091168152602001610111565b61ffff546101d790600160201b900460020b81565b60405160029190910b8152602001610111565b6101fd6101f836600461140c565b610319565b005b61021261020d366004611428565b61043d565b604051908152602001610111565b6101fd61022e36600461149d565b6104e0565b610246610241366004611428565b610535565b6040516101119291906114c1565b6101fd610262366004611548565b6105c8565b6101fd61027536600461140c565b610782565b61ffff80546101af91600160c81b9091041681565b61ffff80546101af91600160d81b9091041681565b6101fd6102b23660046115ab565b61ffff805463ffffffff19811663ffffffff9182169390930116919091179055565b60008161ffff81106102e557600080fd5b015463ffffffff81169150600160201b810460060b90600160581b81046001600160a01b031690600160f81b900460ff1684565b6103296102b260208301836115ab565b61ffff805461037f91600091600160b81b810482169163ffffffff80831692600160201b810460020b926001600160801b03600160381b83041692600160c81b8304821692600160d81b90049091169061092116565b61ffff8054928116600160b81b027fffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffff928216600160c81b029290921663ffffffff60b81b19909316929092171790556103de60408201602083016115d1565b61ffff805462ffffff92909216600160201b0266ffffff000000001990921691909117905561041360608201604083016115f4565b61ffff60076101000a8154816001600160801b0302191690836001600160801b0316021790555050565b61ffff805460009163ffffffff821691600160201b810460020b916001600160801b03600160381b83041691600160b81b900416845a90506104c785898980806020026020016040519081016040528093929190818152602001838360200280828437600092018290525061ffff805491969594508b93508992508a91600160c81b900416610ac1565b50505a6104d49082611633565b98975050505050505050565b61ffff80546104fa91600091600160d81b90041683610c0c565b61ffff8054918116600160d81b027fffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffff90921691909117905550565b6060806105bd61ffff60009054906101000a900463ffffffff16858580806020026020016040519081016040528093929190818152602001838360200280828437600092018290525061ffff80549196959450600160201b820460020b9350600160b81b8204811692506001600160801b03600160381b83041691600160c81b900416610ac1565b915091509250929050565b61ffff8054600160201b810460020b916001600160801b03600160381b83041691600160b81b8104821691600160c81b8204811691600160d81b81049091169063ffffffff1660005b878110156106cc5788888281811061062b5761062b61164a565b61064192602060609092020190810191506115ab565b61064b9083611660565b915061065d600086848a8a8989610921565b90955093508888828181106106745761067461164a565b905060600201602001602081019061068c91906115d1565b96508888828181106106a0576106a061164a565b90506060020160400160208101906106b891906115f4565b9550806106c481611688565b915050610611565b5061ffff805463ffffffff90921663ffffffff19948216600160c81b0261ffff60c81b19968316600160b81b029690961663ffffffff60b81b196001600160801b03909816600160381b0276ffffffffffffffffffffffffffffffff000000000000001962ffffff909a16600160201b02999099167fffffffffffffffffff00000000000000000000000000000000000000ffffffff909416939093179790971795909516179290921716929092179055505050565b61ffff8054600160c81b900416156107e05760405162461bcd60e51b815260206004820152601360248201527f616c726561647920696e697469616c697a656400000000000000000000000000604482015260640160405180910390fd5b6107ed60208201826115ab565b61ffff805463ffffffff191663ffffffff9290921691909117905561081860408201602083016115d1565b61ffff805462ffffff92909216600160201b0266ffffff000000001990921691909117905561084d60608201604083016115f4565b61ffff80546001600160801b0392909216600160381b0276ffffffffffffffffffffffffffffffff00000000000000199092169190911790556108d161089660208301836115ab565b6040805160808101825263ffffffff90921680835260006020840181905291830182905260016060909301839052600160f81b179055908190565b61ffff8054928116600160c81b0261ffff60c81b19928216600160d81b02929092167fffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffffff9093169290921717905550565b6000806000898961ffff1661ffff811061093d5761093d61164a565b60408051608081018252919092015463ffffffff808216808452600160201b830460060b6020850152600160581b83046001600160a01b031694840194909452600160f81b90910460ff1615156060830152909250891614156109a65788859250925050610ab5565b8461ffff168461ffff161180156109c757506001850361ffff168961ffff16145b156109d4578391506109d8565b8491505b8161ffff168960010161ffff16816109f2576109f26116a3565b069250610a0181898989610ca0565b8a8461ffff1661ffff8110610a1857610a1861164a565b825191018054602084015160408501516060909501511515600160f81b027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6001600160a01b03909616600160581b02959095166affffffffffffffffffffff66ffffffffffffff909216600160201b026affffffffffffffffffffff1990931663ffffffff90951694909417919091171691909117919091179055505b97509795505050505050565b60608060008361ffff1611610ae957604051636b93000360e11b815260040160405180910390fd5b865167ffffffffffffffff811115610b0357610b036116b9565b604051908082528060200260200182016040528015610b2c578160200160208202803683370190505b509150865167ffffffffffffffff811115610b4957610b496116b9565b604051908082528060200260200182016040528015610b72578160200160208202803683370190505b50905060005b8751811015610bff57610ba98a8a8a8481518110610b9857610b9861164a565b60200260200101518a8a8a8a610d72565b848381518110610bbb57610bbb61164a565b60200260200101848481518110610bd457610bd461164a565b6001600160a01b039093166020938402919091019092019190915260069190910b9052600101610b78565b5097509795505050505050565b6000808361ffff1611610c3257604051636b93000360e11b815260040160405180910390fd5b8261ffff168261ffff1611610c48575081610c99565b825b8261ffff168161ffff161015610c94576001858261ffff1661ffff8110610c7357610c7361164a565b01805463ffffffff191663ffffffff92909216919091179055600101610c4a565b508190505b9392505050565b604080516080810182526000808252602082018190529181018290526060810191909152600085600001518503905060405180608001604052808663ffffffff1681526020018263ffffffff168660020b0288602001510160060b81526020016000856001600160801b031611610d18576001610d1a565b845b6001600160801b031673ffffffff00000000000000000000000000000000608085901b1681610d4b57610d4b6116a3565b048860400151016001600160a01b0316815260200160011515815250915050949350505050565b60008063ffffffff8716610e18576000898661ffff1661ffff8110610d9957610d9961164a565b60408051608081018252919092015463ffffffff808216808452600160201b830460060b6020850152600160581b83046001600160a01b031694840194909452600160f81b90910460ff16151560608301529092508a1614610e0457610e01818a8988610ca0565b90505b806020015181604001519250925050610ab5565b868803600080610e2d8c8c858c8c8c8c610f1a565b91509150816000015163ffffffff168363ffffffff161415610e5f578160200151826040015194509450505050610ab5565b805163ffffffff84811691161415610e87578060200151816040015194509450505050610ab5565b60008260000151826000015103905060008360000151850390508063ffffffff168263ffffffff1660060b856020015185602001510360060b81610ecd57610ecd6116a3565b05028460200151018263ffffffff168263ffffffff1686604001518660400151036001600160a01b03160281610f0557610f056116a3565b04856040015101965096505050505050610ab5565b604080516080810182526000808252602082018190529181018290526060810191909152604080516080810182526000808252602082018190529181018290526060810191909152888561ffff1661ffff8110610f7957610f7961164a565b60408051608081018252919092015463ffffffff8116808352600160201b820460060b6020840152600160581b82046001600160a01b031693830193909352600160f81b900460ff16151560608201529250610fd790899089611132565b1561100f578663ffffffff16826000015163ffffffff161415610ff957610ab5565b8161100683898988610ca0565b91509150610ab5565b888361ffff168660010161ffff168161102a5761102a6116a3565b0661ffff1661ffff81106110405761104061164a565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b909104161515606082018190529092506110e957604080516080810182528a5463ffffffff81168252600160201b810460060b6020830152600160581b81046001600160a01b031692820192909252600160f81b90910460ff161515606082015291505b6110f888836000015189611132565b611115576040516327e8e87560e01b815260040160405180910390fd5b61112289898988876111f3565b9150915097509795505050505050565b60008363ffffffff168363ffffffff161115801561115c57508363ffffffff168263ffffffff1611155b15611178578163ffffffff168363ffffffff1611159050610c99565b60008463ffffffff168463ffffffff161161119f578363ffffffff16600160201b016111a7565b8363ffffffff165b64ffffffffff16905060008563ffffffff168463ffffffff16116111d7578363ffffffff16600160201b016111df565b8363ffffffff165b64ffffffffff169091111595945050505050565b60408051608081018252600080825260208201819052918101829052606081019190915260408051608081018252600080825260208201819052918101829052606081019190915260008361ffff168560010161ffff1681611257576112576116a3565b0661ffff169050600060018561ffff16830103905060005b506002818301048961ffff8716828161128a5761128a6116a3565b0661ffff811061129c5761129c61164a565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b909104161515606082018190529095506113005780600101925061126f565b898661ffff168260010181611317576113176116a3565b0661ffff81106113295761132961164a565b60408051608081018252929091015463ffffffff81168352600160201b810460060b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b9091041615156060820152855190945060009061138d908b908b611132565b90508080156113a657506113a68a8a8760000151611132565b156113b157506113ce565b806113c1576001820392506113c8565b8160010193505b5061126f565b5050509550959350505050565b6000602082840312156113ed57600080fd5b5035919050565b60006060828403121561140657600080fd5b50919050565b60006060828403121561141e57600080fd5b610c9983836113f4565b6000806020838503121561143b57600080fd5b823567ffffffffffffffff8082111561145357600080fd5b818501915085601f83011261146757600080fd5b81358181111561147657600080fd5b8660208260051b850101111561148b57600080fd5b60209290920196919550909350505050565b6000602082840312156114af57600080fd5b813561ffff81168114610c9957600080fd5b604080825283519082018190526000906020906060840190828701845b828110156114fd57815160060b845292840192908401906001016114de565b5050508381038285015284518082528583019183019060005b8181101561153b5783516001600160a01b031683529284019291840191600101611516565b5090979650505050505050565b6000806020838503121561155b57600080fd5b823567ffffffffffffffff8082111561157357600080fd5b818501915085601f83011261158757600080fd5b81358181111561159657600080fd5b86602060608302850101111561148b57600080fd5b6000602082840312156115bd57600080fd5b813563ffffffff81168114610c9957600080fd5b6000602082840312156115e357600080fd5b81358060020b8114610c9957600080fd5b60006020828403121561160657600080fd5b81356001600160801b0381168114610c9957600080fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156116455761164561161d565b500390565b634e487b7160e01b600052603260045260246000fd5b600063ffffffff80831681851680830382111561167f5761167f61161d565b01949350505050565b600060001982141561169c5761169c61161d565b5060010190565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea164736f6c634300080c000a";

type OracleTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OracleTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OracleTest__factory extends ContractFactory {
  constructor(...args: OracleTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      OracleTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): OracleTest__factory {
    return super.connect(runner) as OracleTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleTestInterface {
    return new Interface(_abi) as OracleTestInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): OracleTest {
    return new Contract(address, _abi, runner) as unknown as OracleTest;
  }
}
