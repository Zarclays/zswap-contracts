/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  TickBitmapTest,
  TickBitmapTestInterface,
} from "../../../../../contracts/uniswapv3/core/test/TickBitmapTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "int16",
        name: "",
        type: "int16",
      },
    ],
    name: "bitmap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "flipTick",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "getGasCostOfFlipTick",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "bool",
        name: "lte",
        type: "bool",
      },
    ],
    name: "getGasCostOfNextInitializedTickWithinOneWord",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "isInitialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "bool",
        name: "lte",
        type: "bool",
      },
    ],
    name: "nextInitializedTickWithinOneWord",
    outputs: [
      {
        internalType: "int24",
        name: "next",
        type: "int24",
      },
      {
        internalType: "bool",
        name: "initialized",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061060d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638815912f116100505780638815912f146100fa578063f04bc9431461010f578063f0fc92241461012257600080fd5b80632bdc2fd3146100775780633e7ba2281461009f5780633ffc81ee146100cc575b600080fd5b61008a61008536600461054b565b610135565b60405190151581526020015b60405180910390f35b6100b26100ad366004610566565b610168565b6040805160029390930b8352901515602083015201610096565b6100ec6100da3660046105a2565b60006020819052908152604090205481565b604051908152602001610096565b61010d61010836600461054b565b610183565b005b6100ec61011d36600461054b565b610193565b6100ec610130366004610566565b6101b8565b6000808061014681856001806101d9565b915091508360020b8260020b1461015e576000610160565b805b949350505050565b60008061017881856001866101d9565b915091509250929050565b610190600082600161031b565b50565b6000805a90506101a6600084600161031b565b5a6101b190826105c5565b9392505050565b6000805a90506101cc6000856001866101d9565b50505a61016090826105c5565b60008060008460020b8660020b816101f3576101f36105ea565b05905060008660020b12801561022057508460020b8660020b81610219576102196105ea565b0760020b15155b1561022a57600019015b831561029e57600281900b600881901d600181810b600090815260208b9052604090205461010090930760ff81169190911b8001600019019283168015159550919290918561028057888360ff16860302610293565b8861028a82610398565b840360ff168603025b965050505050610311565b600181810160020b600881901d80830b600090815260208b9052604090205461010090920760ff81169390931b6000190119918216801515955090929190856102f457888360ff0360ff1686600101010261030a565b88836102ff83610446565b0360ff168660010101025b9650505050505b5094509492505050565b8060020b8260020b81610330576103306105ea565b0760020b1561033e57600080fd5b60008061036c8360020b8560020b81610359576103596105ea565b0560020b600881901d9161010090910790565b600191820b60009081526020979097526040909620805460ff9097169190911b90951890945550505050565b60008082116103a657600080fd5b70010000000000000000000000000000000082106103c657608091821c91015b6801000000000000000082106103de57604091821c91015b64010000000082106103f257602091821c91015b62010000821061040457601091821c91015b610100821061041557600891821c91015b6010821061042557600491821c91015b6004821061043557600291821c91015b60028210610441576001015b919050565b600080821161045457600080fd5b5060ff6fffffffffffffffffffffffffffffffff82161561047857607f1901610480565b608082901c91505b67ffffffffffffffff82161561049957603f19016104a1565b604082901c91505b63ffffffff8216156104b657601f19016104be565b602082901c91505b61ffff8216156104d157600f19016104d9565b601082901c91505b60ff8216156104eb57600719016104f3565b600882901c91505b600f821615610505576003190161050d565b600482901c91505b600382161561051f5760011901610527565b600282901c91505b60018216156104415760001901919050565b8035600281900b811461044157600080fd5b60006020828403121561055d57600080fd5b6101b182610539565b6000806040838503121561057957600080fd5b61058283610539565b91506020830135801515811461059757600080fd5b809150509250929050565b6000602082840312156105b457600080fd5b81358060010b81146101b157600080fd5b6000828210156105e557634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052601260045260246000fdfea164736f6c634300080c000a";

type TickBitmapTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TickBitmapTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TickBitmapTest__factory extends ContractFactory {
  constructor(...args: TickBitmapTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TickBitmapTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TickBitmapTest__factory {
    return super.connect(runner) as TickBitmapTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TickBitmapTestInterface {
    return new Interface(_abi) as TickBitmapTestInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TickBitmapTest {
    return new Contract(address, _abi, runner) as unknown as TickBitmapTest;
  }
}
