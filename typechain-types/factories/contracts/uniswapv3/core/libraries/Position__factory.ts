/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  Position,
  PositionInterface,
} from "../../../../../contracts/uniswapv3/core/libraries/Position";

const _abi = [
  {
    inputs: [],
    name: "NP",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122001b68154982bd8801d1b8a2e09bb2165494ebb2556bedf034dafed7b487a5cb764736f6c634300081a0033";

type PositionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PositionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Position__factory extends ContractFactory {
  constructor(...args: PositionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Position & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Position__factory {
    return super.connect(runner) as Position__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PositionInterface {
    return new Interface(_abi) as PositionInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Position {
    return new Contract(address, _abi, runner) as unknown as Position;
  }
}
