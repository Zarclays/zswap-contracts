/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  Tick,
  TickInterface,
} from "../../../../../contracts/uniswapv3/core/libraries/Tick";

const _abi = [
  {
    inputs: [],
    name: "LO",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220a292b50c7069eda6d53388d90f14a196aa52775bd9be1e8d4d102e6884056b0b64736f6c634300081a0033";

type TickConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TickConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Tick__factory extends ContractFactory {
  constructor(...args: TickConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Tick & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Tick__factory {
    return super.connect(runner) as Tick__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TickInterface {
    return new Interface(_abi) as TickInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Tick {
    return new Contract(address, _abi, runner) as unknown as Tick;
  }
}
