/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  BaseBoringBatchable,
  BaseBoringBatchableInterface,
} from "../../../contracts/MiniChefV3.sol/BaseBoringBatchable";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "innerError",
        type: "bytes",
      },
    ],
    name: "BatchError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "calls",
        type: "bytes[]",
      },
      {
        internalType: "bool",
        name: "revertOnFail",
        type: "bool",
      },
    ],
    name: "batch",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234601557610309908161001b8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c63d2423b511461002757600080fd5b604036600319011261008e5760043567ffffffffffffffff811161008e573660238201121561008e57806004013567ffffffffffffffff811161008e573660248260051b8401011161008e5760243590811515820361008e57602461008c9301610129565b005b600080fd5b908092918237016000815290565b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff8111838210176100dd57604052565b6100a1565b67ffffffffffffffff81116100dd57601f01601f191660200190565b3d15610124573d90610117610112836100e2565b6100b7565b9182523d6000602084013e565b606090565b90919260005b838110156101b65760008160051b840135601e19853603018112156101b257840180359067ffffffffffffffff82116101ae5760200181360381136101ae5790829161018060405180938193610093565b0390305af461018d6100fe565b9015806101a7575b6101a2575060010161012f565b610219565b5085610195565b8280fd5b5080fd5b5092505050565b60005b8381106101d05750506000910152565b81810151838201526020016101c0565b906020916101f9815180928185528580860191016101bd565b601f01601f1916010190565b9060206102169281815201906101e0565b90565b60448151106102ae57600481015181016024810191906020908290031261008e5760248101519067ffffffffffffffff821161008e5701908060438301121561008e5760248201519161026e610112846100e2565b838152916044828501011161008e576102aa926102929160446020850191016101bd565b60405162461bcd60e51b815291829160048301610205565b0390fd5b60405163d935448560e01b8152602060048201529081906102aa9060248301906101e056fea2646970667358221220fe1410cc4998e31634b03814075dd200737cb4250e7483ba8a25885cd702b6c664736f6c634300081a0033";

type BaseBoringBatchableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BaseBoringBatchableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BaseBoringBatchable__factory extends ContractFactory {
  constructor(...args: BaseBoringBatchableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      BaseBoringBatchable & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): BaseBoringBatchable__factory {
    return super.connect(runner) as BaseBoringBatchable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BaseBoringBatchableInterface {
    return new Interface(_abi) as BaseBoringBatchableInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BaseBoringBatchable {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as BaseBoringBatchable;
  }
}
