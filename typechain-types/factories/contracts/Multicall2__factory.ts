/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  Multicall2,
  Multicall2Interface,
} from "../../contracts/Multicall2";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "blockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        internalType: "address",
        name: "coinbase",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "difficulty",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryAggregate",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryBlockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234601557610932908161001b8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c9081630f28c97d146104e657508063252dba421461035a57806327e86d6e1461031b578063399542e9146102f857806342cbb15c146102dd5780634d2301cc146102ad57806372425d9d1461029257806386d516e814610277578063a8b0574e1461025c578063bce38bd71461022e578063c3077fa9146100c65763ee82ac5e146100a357600080fd5b346100c15760203660031901126100c1576020604051600435408152f35b600080fd5b346100c15760203660031901126100c15760043567ffffffffffffffff81116100c1576100f790369060040161058f565b805190600061010d6101088461055b565b610535565b9280845261011d601f199161055b565b019060005b82811061020e5750505060005b81518110156101f8576000806001600160a01b0361014d8486610783565b515116602061015c8587610783565b5101519082602083519301915af1906101736107ad565b91156101a9576001916101846104ff565b9083825260208201526101978286610783565b526101a28185610783565b500161012f565b60405162461bcd60e51b815260206004820152602160248201527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c656044820152601960fa1b6064820152608490fd5b6040518061020a854380409084610767565b0390f35b6020906102196104ff565b83815260608382015282828801015201610122565b346100c15761020a610248610242366106bf565b906107d3565b6040519182916020835260208301906106fb565b346100c15760003660031901126100c1576020604051418152f35b346100c15760003660031901126100c1576020604051458152f35b346100c15760003660031901126100c1576020604051448152f35b346100c15760203660031901126100c1576004356001600160a01b03811681036100c15760209031604051908152f35b346100c15760003660031901126100c1576020604051438152f35b346100c15761020a61030c610242366106bf565b60405191829143404384610767565b346100c15760003660031901126100c15760001943014381116103445760209060405190408152f35b634e487b7160e01b600052601160045260246000fd5b346100c15760203660031901126100c15760043567ffffffffffffffff81116100c15761038b90369060040161058f565b80519061039a6101088361055b565b918083526103aa601f199161055b565b0160005b8181106104d557505060005b8151811015610467576000806001600160a01b036103d88486610783565b51511660206103e78587610783565b5101519082602083519301915af1906103fe6107ad565b9115610423576001916104118286610783565b5261041c8185610783565b50016103ba565b606460405162461bcd60e51b815260206004820152602060248201527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c65646044820152fd5b826040518091604082014383526040602084015281518091526060830190602060608260051b8601019301916000905b8282106104a657505050500390f35b919360019193955060206104c58192605f198a8203018652885161067e565b9601920192018594939192610497565b8060606020809387010152016103ae565b346100c15760003660031901126100c157602090428152f35b604051906040820182811067ffffffffffffffff82111761051f57604052565b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff81118382101761051f57604052565b67ffffffffffffffff811161051f5760051b60200190565b67ffffffffffffffff811161051f57601f01601f191660200190565b9080601f830112156100c1578135916105aa6101088461055b565b9260208085838152019160051b830101918383116100c15760208101915b8383106105d757505050505090565b823567ffffffffffffffff81116100c1578201906040828703601f1901126100c1576106016104ff565b9160208101356001600160a01b03811681036100c1578352604081013567ffffffffffffffff81116100c15760209101019086601f830112156100c15781359261064d61010885610573565b84815288602086860101116100c15760006020868197828098018386013783010152838201528152019201916105c8565b919082519283825260005b8481106106aa575050826000602080949584010152601f8019910116010190565b80602080928401015182828601015201610689565b9060406003198301126100c15760043580151581036100c157916024359067ffffffffffffffff82116100c1576106f89160040161058f565b90565b9080602083519182815201916020808360051b8301019401926000915b83831061072757505050505090565b9091929394602080610758600193601f198682030187526040838b518051151584520151918185820152019061067e565b97019301930191939290610718565b6106f893926060928252602082015281604082015201906106fb565b80518210156107975760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b3d156107ce573d906107c161010883610573565b9182523d6000602084013e565b606090565b815192916107e36101088561055b565b938085526107f3601f199161055b565b0160005b8181106108db5750508360005b82518110156108d45783906000806001600160a01b036108248488610783565b51511660206108338589610783565b5101519082602083519301915af16108496107ad565b92610880575b60019261085a6104ff565b9115158252602082015261086e8289610783565b526108798188610783565b5001610804565b8061084f5760405162461bcd60e51b815260206004820152602160248201527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c656044820152601960fa1b6064820152608490fd5b5093505050565b6020906108e66104ff565b60008152606083820152828289010152016107f756fea26469706673582212202599184132bb8c84e616e22e5ff81433ca07423e71ea2859f2bce473d1717b4e64736f6c634300081a0033";

type Multicall2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Multicall2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall2__factory extends ContractFactory {
  constructor(...args: Multicall2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Multicall2 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Multicall2__factory {
    return super.connect(runner) as Multicall2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Multicall2Interface {
    return new Interface(_abi) as Multicall2Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): Multicall2 {
    return new Contract(address, _abi, runner) as unknown as Multicall2;
  }
}
