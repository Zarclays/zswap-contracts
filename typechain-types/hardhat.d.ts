/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "BaseBoringBatchable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseBoringBatchable__factory>;
    getContractFactory(
      name: "BoringBatchable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringBatchable__factory>;
    getContractFactory(
      name: "BoringOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringOwnable__factory>;
    getContractFactory(
      name: "BoringOwnableData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringOwnableData__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "AccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerable__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IAccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Pausable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC20PresetMinterPauser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PresetMinterPauser__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "BaseBoringBatchable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseBoringBatchable__factory>;
    getContractFactory(
      name: "BentoBoxV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BentoBoxV1__factory>;
    getContractFactory(
      name: "BoringBatchable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringBatchable__factory>;
    getContractFactory(
      name: "BoringFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringFactory__factory>;
    getContractFactory(
      name: "BoringOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringOwnable__factory>;
    getContractFactory(
      name: "BoringOwnableData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringOwnableData__factory>;
    getContractFactory(
      name: "IBatchFlashBorrower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBatchFlashBorrower__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IFlashBorrower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlashBorrower__factory>;
    getContractFactory(
      name: "IMasterContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMasterContract__factory>;
    getContractFactory(
      name: "IStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStrategy__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "MasterContractManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MasterContractManager__factory>;
    getContractFactory(
      name: "BoringOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringOwnable__factory>;
    getContractFactory(
      name: "BoringOwnableData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringOwnableData__factory>;
    getContractFactory(
      name: "Domain",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Domain__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Data",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Data__factory>;
    getContractFactory(
      name: "IBatchFlashBorrower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBatchFlashBorrower__factory>;
    getContractFactory(
      name: "IBentoBoxV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBentoBoxV1__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IFlashBorrower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlashBorrower__factory>;
    getContractFactory(
      name: "IMasterContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMasterContract__factory>;
    getContractFactory(
      name: "IOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracle__factory>;
    getContractFactory(
      name: "IStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStrategy__factory>;
    getContractFactory(
      name: "ISwapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapper__factory>;
    getContractFactory(
      name: "KashiPairMediumRiskV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KashiPairMediumRiskV1__factory>;
    getContractFactory(
      name: "IOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracle__factory>;
    getContractFactory(
      name: "PeggedOracleV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PeggedOracleV1__factory>;
    getContractFactory(
      name: "Timelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Timelock__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IMasterChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMasterChef__factory>;
    getContractFactory(
      name: "IMiniChefV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMiniChefV2__factory>;
    getContractFactory(
      name: "IRewarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewarder__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "IMigratorChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMigratorChef__factory>;
    getContractFactory(
      name: "MasterChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MasterChef__factory>;
    getContractFactory(
      name: "IMigratorChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMigratorChef__factory>;
    getContractFactory(
      name: "MasterChefV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MasterChefV2__factory>;
    getContractFactory(
      name: "Migrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrator__factory>;
    getContractFactory(
      name: "IMigratorChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMigratorChef__factory>;
    getContractFactory(
      name: "MiniChefV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MiniChefV2__factory>;
    getContractFactory(
      name: "BaseBoringBatchable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseBoringBatchable__factory>;
    getContractFactory(
      name: "BoringBatchable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringBatchable__factory>;
    getContractFactory(
      name: "BoringOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringOwnable__factory>;
    getContractFactory(
      name: "BoringOwnableData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringOwnableData__factory>;
    getContractFactory(
      name: "IBoringERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBoringERC20__factory>;
    getContractFactory(
      name: "MiniChefV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MiniChefV3__factory>;
    getContractFactory(
      name: "CloneRewarderTime",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CloneRewarderTime__factory>;
    getContractFactory(
      name: "IMasterChefV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMasterChefV2__factory>;
    getContractFactory(
      name: "CloneRewarderTimeDual",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CloneRewarderTimeDual__factory>;
    getContractFactory(
      name: "IMasterChefV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMasterChefV2__factory>;
    getContractFactory(
      name: "ComplexRewarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComplexRewarder__factory>;
    getContractFactory(
      name: "ComplexRewarderTime",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComplexRewarderTime__factory>;
    getContractFactory(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock__factory>;
    getContractFactory(
      name: "RewarderBrokenMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewarderBrokenMock__factory>;
    getContractFactory(
      name: "RewarderMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewarderMock__factory>;
    getContractFactory(
      name: "SushiMakerExploitMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SushiMakerExploitMock__factory>;
    getContractFactory(
      name: "SushiMakerKashiExploitMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SushiMakerKashiExploitMock__factory>;
    getContractFactory(
      name: "SushiSwapFactoryMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SushiSwapFactoryMock__factory>;
    getContractFactory(
      name: "SushiSwapPairMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SushiSwapPairMock__factory>;
    getContractFactory(
      name: "WETH9Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9Mock__factory>;
    getContractFactory(
      name: "Multicall2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall2__factory>;
    getContractFactory(
      name: "Multicall3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall3__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "OwnableData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableData__factory>;
    getContractFactory(
      name: "SushiBar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SushiBar__factory>;
    getContractFactory(
      name: "IBentoBoxWithdraw",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBentoBoxWithdraw__factory>;
    getContractFactory(
      name: "IKashiWithdrawFee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKashiWithdrawFee__factory>;
    getContractFactory(
      name: "SushiMakerKashi",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SushiMakerKashi__factory>;
    getContractFactory(
      name: "SushiRoll",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SushiRoll__factory>;
    getContractFactory(
      name: "TestToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestToken__factory>;
    getContractFactory(
      name: "TestToken2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestToken2__factory>;
    getContractFactory(
      name: "IERC20Uniswap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Uniswap__factory>;
    getContractFactory(
      name: "IUniswapV2Callee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Callee__factory>;
    getContractFactory(
      name: "IUniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2ERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "UniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2ERC20__factory>;
    getContractFactory(
      name: "UniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Factory__factory>;
    getContractFactory(
      name: "IMigrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMigrator__factory>;
    getContractFactory(
      name: "UniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Pair__factory>;
    getContractFactory(
      name: "UniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Router02__factory>;
    getContractFactory(
      name: "UniswapV2Router02Celo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Router02Celo__factory>;
    getContractFactory(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9__factory>;
    getContractFactory(
      name: "ZSwapFeeReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZSwapFeeReceiver__factory>;
    getContractFactory(
      name: "ZSwapMaker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZSwapMaker__factory>;
    getContractFactory(
      name: "ZSwapToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZSwapToken__factory>;

    getContractAt(
      name: "BaseBoringBatchable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseBoringBatchable>;
    getContractAt(
      name: "BoringBatchable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BoringBatchable>;
    getContractAt(
      name: "BoringOwnable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BoringOwnable>;
    getContractAt(
      name: "BoringOwnableData",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BoringOwnableData>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "AccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "AccessControlEnumerable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerable>;
    getContractAt(
      name: "IAccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IAccessControlEnumerable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerable>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "ERC20Burnable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Pausable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC20PresetMinterPauser",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PresetMinterPauser>;
    getContractAt(
      name: "IERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "BaseBoringBatchable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseBoringBatchable>;
    getContractAt(
      name: "BentoBoxV1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BentoBoxV1>;
    getContractAt(
      name: "BoringBatchable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BoringBatchable>;
    getContractAt(
      name: "BoringFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BoringFactory>;
    getContractAt(
      name: "BoringOwnable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BoringOwnable>;
    getContractAt(
      name: "BoringOwnableData",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BoringOwnableData>;
    getContractAt(
      name: "IBatchFlashBorrower",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBatchFlashBorrower>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IFlashBorrower",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlashBorrower>;
    getContractAt(
      name: "IMasterContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMasterContract>;
    getContractAt(
      name: "IStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStrategy>;
    getContractAt(
      name: "IWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "MasterContractManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MasterContractManager>;
    getContractAt(
      name: "BoringOwnable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BoringOwnable>;
    getContractAt(
      name: "BoringOwnableData",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BoringOwnableData>;
    getContractAt(
      name: "Domain",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Domain>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Data",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Data>;
    getContractAt(
      name: "IBatchFlashBorrower",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBatchFlashBorrower>;
    getContractAt(
      name: "IBentoBoxV1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBentoBoxV1>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IFlashBorrower",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlashBorrower>;
    getContractAt(
      name: "IMasterContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMasterContract>;
    getContractAt(
      name: "IOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracle>;
    getContractAt(
      name: "IStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStrategy>;
    getContractAt(
      name: "ISwapper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapper>;
    getContractAt(
      name: "KashiPairMediumRiskV1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.KashiPairMediumRiskV1>;
    getContractAt(
      name: "IOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracle>;
    getContractAt(
      name: "PeggedOracleV1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PeggedOracleV1>;
    getContractAt(
      name: "Timelock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Timelock>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IMasterChef",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMasterChef>;
    getContractAt(
      name: "IMiniChefV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMiniChefV2>;
    getContractAt(
      name: "IRewarder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewarder>;
    getContractAt(
      name: "SafeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "IMigratorChef",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMigratorChef>;
    getContractAt(
      name: "MasterChef",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MasterChef>;
    getContractAt(
      name: "IMigratorChef",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMigratorChef>;
    getContractAt(
      name: "MasterChefV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MasterChefV2>;
    getContractAt(
      name: "Migrator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Migrator>;
    getContractAt(
      name: "IMigratorChef",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMigratorChef>;
    getContractAt(
      name: "MiniChefV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MiniChefV2>;
    getContractAt(
      name: "BaseBoringBatchable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseBoringBatchable>;
    getContractAt(
      name: "BoringBatchable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BoringBatchable>;
    getContractAt(
      name: "BoringOwnable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BoringOwnable>;
    getContractAt(
      name: "BoringOwnableData",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BoringOwnableData>;
    getContractAt(
      name: "IBoringERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBoringERC20>;
    getContractAt(
      name: "MiniChefV3",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MiniChefV3>;
    getContractAt(
      name: "CloneRewarderTime",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CloneRewarderTime>;
    getContractAt(
      name: "IMasterChefV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMasterChefV2>;
    getContractAt(
      name: "CloneRewarderTimeDual",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CloneRewarderTimeDual>;
    getContractAt(
      name: "IMasterChefV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMasterChefV2>;
    getContractAt(
      name: "ComplexRewarder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ComplexRewarder>;
    getContractAt(
      name: "ComplexRewarderTime",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ComplexRewarderTime>;
    getContractAt(
      name: "ERC20Mock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mock>;
    getContractAt(
      name: "RewarderBrokenMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RewarderBrokenMock>;
    getContractAt(
      name: "RewarderMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RewarderMock>;
    getContractAt(
      name: "SushiMakerExploitMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SushiMakerExploitMock>;
    getContractAt(
      name: "SushiMakerKashiExploitMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SushiMakerKashiExploitMock>;
    getContractAt(
      name: "SushiSwapFactoryMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SushiSwapFactoryMock>;
    getContractAt(
      name: "SushiSwapPairMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SushiSwapPairMock>;
    getContractAt(
      name: "WETH9Mock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9Mock>;
    getContractAt(
      name: "Multicall2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall2>;
    getContractAt(
      name: "Multicall3",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall3>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "OwnableData",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableData>;
    getContractAt(
      name: "SushiBar",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SushiBar>;
    getContractAt(
      name: "IBentoBoxWithdraw",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBentoBoxWithdraw>;
    getContractAt(
      name: "IKashiWithdrawFee",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IKashiWithdrawFee>;
    getContractAt(
      name: "SushiMakerKashi",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SushiMakerKashi>;
    getContractAt(
      name: "SushiRoll",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SushiRoll>;
    getContractAt(
      name: "TestToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestToken>;
    getContractAt(
      name: "TestToken2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestToken2>;
    getContractAt(
      name: "IERC20Uniswap",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Uniswap>;
    getContractAt(
      name: "IUniswapV2Callee",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Callee>;
    getContractAt(
      name: "IUniswapV2ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2ERC20>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "IWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "UniswapV2ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2ERC20>;
    getContractAt(
      name: "UniswapV2Factory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Factory>;
    getContractAt(
      name: "IMigrator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMigrator>;
    getContractAt(
      name: "UniswapV2Pair",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Pair>;
    getContractAt(
      name: "UniswapV2Router02",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Router02>;
    getContractAt(
      name: "UniswapV2Router02Celo",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Router02Celo>;
    getContractAt(
      name: "WETH9",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9>;
    getContractAt(
      name: "ZSwapFeeReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ZSwapFeeReceiver>;
    getContractAt(
      name: "ZSwapMaker",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ZSwapMaker>;
    getContractAt(
      name: "ZSwapToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ZSwapToken>;

    deployContract(
      name: "BaseBoringBatchable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseBoringBatchable>;
    deployContract(
      name: "BoringBatchable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoringBatchable>;
    deployContract(
      name: "BoringOwnable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoringOwnable>;
    deployContract(
      name: "BoringOwnableData",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoringOwnableData>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "AccessControlEnumerable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlEnumerable>;
    deployContract(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "IAccessControlEnumerable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControlEnumerable>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Burnable>;
    deployContract(
      name: "ERC20Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Pausable>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC20PresetMinterPauser",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20PresetMinterPauser>;
    deployContract(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "BaseBoringBatchable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseBoringBatchable>;
    deployContract(
      name: "BentoBoxV1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BentoBoxV1>;
    deployContract(
      name: "BoringBatchable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoringBatchable>;
    deployContract(
      name: "BoringFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoringFactory>;
    deployContract(
      name: "BoringOwnable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoringOwnable>;
    deployContract(
      name: "BoringOwnableData",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoringOwnableData>;
    deployContract(
      name: "IBatchFlashBorrower",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBatchFlashBorrower>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IFlashBorrower",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFlashBorrower>;
    deployContract(
      name: "IMasterContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMasterContract>;
    deployContract(
      name: "IStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStrategy>;
    deployContract(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "MasterContractManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MasterContractManager>;
    deployContract(
      name: "BoringOwnable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoringOwnable>;
    deployContract(
      name: "BoringOwnableData",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoringOwnableData>;
    deployContract(
      name: "Domain",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Domain>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Data",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Data>;
    deployContract(
      name: "IBatchFlashBorrower",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBatchFlashBorrower>;
    deployContract(
      name: "IBentoBoxV1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBentoBoxV1>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IFlashBorrower",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFlashBorrower>;
    deployContract(
      name: "IMasterContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMasterContract>;
    deployContract(
      name: "IOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOracle>;
    deployContract(
      name: "IStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStrategy>;
    deployContract(
      name: "ISwapper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISwapper>;
    deployContract(
      name: "KashiPairMediumRiskV1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KashiPairMediumRiskV1>;
    deployContract(
      name: "IOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOracle>;
    deployContract(
      name: "PeggedOracleV1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PeggedOracleV1>;
    deployContract(
      name: "Timelock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Timelock>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IMasterChef",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMasterChef>;
    deployContract(
      name: "IMiniChefV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMiniChefV2>;
    deployContract(
      name: "IRewarder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRewarder>;
    deployContract(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "IMigratorChef",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMigratorChef>;
    deployContract(
      name: "MasterChef",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MasterChef>;
    deployContract(
      name: "IMigratorChef",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMigratorChef>;
    deployContract(
      name: "MasterChefV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MasterChefV2>;
    deployContract(
      name: "Migrator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Migrator>;
    deployContract(
      name: "IMigratorChef",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMigratorChef>;
    deployContract(
      name: "MiniChefV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MiniChefV2>;
    deployContract(
      name: "BaseBoringBatchable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseBoringBatchable>;
    deployContract(
      name: "BoringBatchable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoringBatchable>;
    deployContract(
      name: "BoringOwnable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoringOwnable>;
    deployContract(
      name: "BoringOwnableData",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoringOwnableData>;
    deployContract(
      name: "IBoringERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBoringERC20>;
    deployContract(
      name: "MiniChefV3",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MiniChefV3>;
    deployContract(
      name: "CloneRewarderTime",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CloneRewarderTime>;
    deployContract(
      name: "IMasterChefV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMasterChefV2>;
    deployContract(
      name: "CloneRewarderTimeDual",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CloneRewarderTimeDual>;
    deployContract(
      name: "IMasterChefV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMasterChefV2>;
    deployContract(
      name: "ComplexRewarder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplexRewarder>;
    deployContract(
      name: "ComplexRewarderTime",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplexRewarderTime>;
    deployContract(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Mock>;
    deployContract(
      name: "RewarderBrokenMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RewarderBrokenMock>;
    deployContract(
      name: "RewarderMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RewarderMock>;
    deployContract(
      name: "SushiMakerExploitMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SushiMakerExploitMock>;
    deployContract(
      name: "SushiMakerKashiExploitMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SushiMakerKashiExploitMock>;
    deployContract(
      name: "SushiSwapFactoryMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SushiSwapFactoryMock>;
    deployContract(
      name: "SushiSwapPairMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SushiSwapPairMock>;
    deployContract(
      name: "WETH9Mock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WETH9Mock>;
    deployContract(
      name: "Multicall2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Multicall2>;
    deployContract(
      name: "Multicall3",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Multicall3>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "OwnableData",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableData>;
    deployContract(
      name: "SushiBar",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SushiBar>;
    deployContract(
      name: "IBentoBoxWithdraw",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBentoBoxWithdraw>;
    deployContract(
      name: "IKashiWithdrawFee",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IKashiWithdrawFee>;
    deployContract(
      name: "SushiMakerKashi",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SushiMakerKashi>;
    deployContract(
      name: "SushiRoll",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SushiRoll>;
    deployContract(
      name: "TestToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestToken>;
    deployContract(
      name: "TestToken2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestToken2>;
    deployContract(
      name: "IERC20Uniswap",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Uniswap>;
    deployContract(
      name: "IUniswapV2Callee",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Callee>;
    deployContract(
      name: "IUniswapV2ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2ERC20>;
    deployContract(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Factory>;
    deployContract(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Pair>;
    deployContract(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Router01>;
    deployContract(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Router02>;
    deployContract(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "UniswapV2ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV2ERC20>;
    deployContract(
      name: "UniswapV2Factory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV2Factory>;
    deployContract(
      name: "IMigrator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMigrator>;
    deployContract(
      name: "UniswapV2Pair",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV2Pair>;
    deployContract(
      name: "UniswapV2Router02",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV2Router02>;
    deployContract(
      name: "UniswapV2Router02Celo",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV2Router02Celo>;
    deployContract(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WETH9>;
    deployContract(
      name: "ZSwapFeeReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ZSwapFeeReceiver>;
    deployContract(
      name: "ZSwapMaker",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ZSwapMaker>;
    deployContract(
      name: "ZSwapToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ZSwapToken>;

    deployContract(
      name: "BaseBoringBatchable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseBoringBatchable>;
    deployContract(
      name: "BoringBatchable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoringBatchable>;
    deployContract(
      name: "BoringOwnable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoringOwnable>;
    deployContract(
      name: "BoringOwnableData",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoringOwnableData>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "AccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "AccessControlEnumerable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlEnumerable>;
    deployContract(
      name: "IAccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "IAccessControlEnumerable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControlEnumerable>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "ERC20Burnable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Burnable>;
    deployContract(
      name: "ERC20Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Pausable>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC20PresetMinterPauser",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20PresetMinterPauser>;
    deployContract(
      name: "IERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "BaseBoringBatchable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseBoringBatchable>;
    deployContract(
      name: "BentoBoxV1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BentoBoxV1>;
    deployContract(
      name: "BoringBatchable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoringBatchable>;
    deployContract(
      name: "BoringFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoringFactory>;
    deployContract(
      name: "BoringOwnable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoringOwnable>;
    deployContract(
      name: "BoringOwnableData",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoringOwnableData>;
    deployContract(
      name: "IBatchFlashBorrower",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBatchFlashBorrower>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IFlashBorrower",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFlashBorrower>;
    deployContract(
      name: "IMasterContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMasterContract>;
    deployContract(
      name: "IStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStrategy>;
    deployContract(
      name: "IWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "MasterContractManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MasterContractManager>;
    deployContract(
      name: "BoringOwnable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoringOwnable>;
    deployContract(
      name: "BoringOwnableData",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoringOwnableData>;
    deployContract(
      name: "Domain",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Domain>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Data",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Data>;
    deployContract(
      name: "IBatchFlashBorrower",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBatchFlashBorrower>;
    deployContract(
      name: "IBentoBoxV1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBentoBoxV1>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IFlashBorrower",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFlashBorrower>;
    deployContract(
      name: "IMasterContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMasterContract>;
    deployContract(
      name: "IOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOracle>;
    deployContract(
      name: "IStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStrategy>;
    deployContract(
      name: "ISwapper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISwapper>;
    deployContract(
      name: "KashiPairMediumRiskV1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KashiPairMediumRiskV1>;
    deployContract(
      name: "IOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOracle>;
    deployContract(
      name: "PeggedOracleV1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PeggedOracleV1>;
    deployContract(
      name: "Timelock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Timelock>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IMasterChef",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMasterChef>;
    deployContract(
      name: "IMiniChefV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMiniChefV2>;
    deployContract(
      name: "IRewarder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRewarder>;
    deployContract(
      name: "SafeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "IMigratorChef",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMigratorChef>;
    deployContract(
      name: "MasterChef",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MasterChef>;
    deployContract(
      name: "IMigratorChef",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMigratorChef>;
    deployContract(
      name: "MasterChefV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MasterChefV2>;
    deployContract(
      name: "Migrator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Migrator>;
    deployContract(
      name: "IMigratorChef",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMigratorChef>;
    deployContract(
      name: "MiniChefV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MiniChefV2>;
    deployContract(
      name: "BaseBoringBatchable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseBoringBatchable>;
    deployContract(
      name: "BoringBatchable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoringBatchable>;
    deployContract(
      name: "BoringOwnable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoringOwnable>;
    deployContract(
      name: "BoringOwnableData",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BoringOwnableData>;
    deployContract(
      name: "IBoringERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBoringERC20>;
    deployContract(
      name: "MiniChefV3",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MiniChefV3>;
    deployContract(
      name: "CloneRewarderTime",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CloneRewarderTime>;
    deployContract(
      name: "IMasterChefV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMasterChefV2>;
    deployContract(
      name: "CloneRewarderTimeDual",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CloneRewarderTimeDual>;
    deployContract(
      name: "IMasterChefV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMasterChefV2>;
    deployContract(
      name: "ComplexRewarder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplexRewarder>;
    deployContract(
      name: "ComplexRewarderTime",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplexRewarderTime>;
    deployContract(
      name: "ERC20Mock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Mock>;
    deployContract(
      name: "RewarderBrokenMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RewarderBrokenMock>;
    deployContract(
      name: "RewarderMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RewarderMock>;
    deployContract(
      name: "SushiMakerExploitMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SushiMakerExploitMock>;
    deployContract(
      name: "SushiMakerKashiExploitMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SushiMakerKashiExploitMock>;
    deployContract(
      name: "SushiSwapFactoryMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SushiSwapFactoryMock>;
    deployContract(
      name: "SushiSwapPairMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SushiSwapPairMock>;
    deployContract(
      name: "WETH9Mock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WETH9Mock>;
    deployContract(
      name: "Multicall2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Multicall2>;
    deployContract(
      name: "Multicall3",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Multicall3>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "OwnableData",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableData>;
    deployContract(
      name: "SushiBar",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SushiBar>;
    deployContract(
      name: "IBentoBoxWithdraw",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBentoBoxWithdraw>;
    deployContract(
      name: "IKashiWithdrawFee",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IKashiWithdrawFee>;
    deployContract(
      name: "SushiMakerKashi",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SushiMakerKashi>;
    deployContract(
      name: "SushiRoll",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SushiRoll>;
    deployContract(
      name: "TestToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestToken>;
    deployContract(
      name: "TestToken2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestToken2>;
    deployContract(
      name: "IERC20Uniswap",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Uniswap>;
    deployContract(
      name: "IUniswapV2Callee",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Callee>;
    deployContract(
      name: "IUniswapV2ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2ERC20>;
    deployContract(
      name: "IUniswapV2Factory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Factory>;
    deployContract(
      name: "IUniswapV2Pair",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Pair>;
    deployContract(
      name: "IUniswapV2Router01",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Router01>;
    deployContract(
      name: "IUniswapV2Router02",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Router02>;
    deployContract(
      name: "IWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "UniswapV2ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV2ERC20>;
    deployContract(
      name: "UniswapV2Factory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV2Factory>;
    deployContract(
      name: "IMigrator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMigrator>;
    deployContract(
      name: "UniswapV2Pair",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV2Pair>;
    deployContract(
      name: "UniswapV2Router02",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV2Router02>;
    deployContract(
      name: "UniswapV2Router02Celo",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV2Router02Celo>;
    deployContract(
      name: "WETH9",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WETH9>;
    deployContract(
      name: "ZSwapFeeReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ZSwapFeeReceiver>;
    deployContract(
      name: "ZSwapMaker",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ZSwapMaker>;
    deployContract(
      name: "ZSwapToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ZSwapToken>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
